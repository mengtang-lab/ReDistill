
 Run on time: 2024-03-22 15:36:35.508247

 Architecture: mobilenetv3_small-1-22121111211

 Arguments:
	 root                 : ./
	 seed                 : 0
	 devices              : 0
	 dataset              : STL10
	 im_size              : 128
	 batch_size           : 8
	 architecture         : mobilenetv3_small-1-22121111211
	 pretrained           : 
	 epochs               : 300
	 learning_rate        : 0.01
	 lr_interval          : 0.6 0.8 0.9
	 lr_reduce            : 5
	 optimizer            : SGD
	 log                  : True
	 test_only            : False
	 dont_save            : False

 Model: DataParallel(
  (module): Network(
    (net): MobileNetV3(
      (features): Sequential(
        (0): Sequential(
          (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): h_swish(
            (sigmoid): h_sigmoid(
              (relu): ReLU6(inplace=True)
            )
          )
        )
        (1): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=16, bias=False)
            (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): SELayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=16, out_features=8, bias=True)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=8, out_features=16, bias=True)
                (3): h_sigmoid(
                  (relu): ReLU6(inplace=True)
                )
              )
            )
            (4): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (5): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (2): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(16, 72, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(72, 72, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=72, bias=False)
            (4): BatchNorm2d(72, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): Identity()
            (6): ReLU(inplace=True)
            (7): Conv2d(72, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (8): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (3): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(24, 88, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(88, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU(inplace=True)
            (3): Conv2d(88, 88, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=88, bias=False)
            (4): BatchNorm2d(88, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): Identity()
            (6): ReLU(inplace=True)
            (7): Conv2d(88, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (8): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (4): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(24, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): h_swish(
              (sigmoid): h_sigmoid(
                (relu): ReLU6(inplace=True)
              )
            )
            (3): Conv2d(96, 96, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=96, bias=False)
            (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): SELayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=96, out_features=24, bias=True)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=24, out_features=96, bias=True)
                (3): h_sigmoid(
                  (relu): ReLU6(inplace=True)
                )
              )
            )
            (6): h_swish(
              (sigmoid): h_sigmoid(
                (relu): ReLU6(inplace=True)
              )
            )
            (7): Conv2d(96, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (8): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (5): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): h_swish(
              (sigmoid): h_sigmoid(
                (relu): ReLU6(inplace=True)
              )
            )
            (3): Conv2d(240, 240, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=240, bias=False)
            (4): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): SELayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=240, out_features=64, bias=True)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=240, bias=True)
                (3): h_sigmoid(
                  (relu): ReLU6(inplace=True)
                )
              )
            )
            (6): h_swish(
              (sigmoid): h_sigmoid(
                (relu): ReLU6(inplace=True)
              )
            )
            (7): Conv2d(240, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (8): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (6): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): h_swish(
              (sigmoid): h_sigmoid(
                (relu): ReLU6(inplace=True)
              )
            )
            (3): Conv2d(240, 240, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=240, bias=False)
            (4): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): SELayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=240, out_features=64, bias=True)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=64, out_features=240, bias=True)
                (3): h_sigmoid(
                  (relu): ReLU6(inplace=True)
                )
              )
            )
            (6): h_swish(
              (sigmoid): h_sigmoid(
                (relu): ReLU6(inplace=True)
              )
            )
            (7): Conv2d(240, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (8): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (7): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(40, 120, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): h_swish(
              (sigmoid): h_sigmoid(
                (relu): ReLU6(inplace=True)
              )
            )
            (3): Conv2d(120, 120, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=120, bias=False)
            (4): BatchNorm2d(120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): SELayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=120, out_features=32, bias=True)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=32, out_features=120, bias=True)
                (3): h_sigmoid(
                  (relu): ReLU6(inplace=True)
                )
              )
            )
            (6): h_swish(
              (sigmoid): h_sigmoid(
                (relu): ReLU6(inplace=True)
              )
            )
            (7): Conv2d(120, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (8): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (8): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(48, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): h_swish(
              (sigmoid): h_sigmoid(
                (relu): ReLU6(inplace=True)
              )
            )
            (3): Conv2d(144, 144, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): SELayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=144, out_features=40, bias=True)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=40, out_features=144, bias=True)
                (3): h_sigmoid(
                  (relu): ReLU6(inplace=True)
                )
              )
            )
            (6): h_swish(
              (sigmoid): h_sigmoid(
                (relu): ReLU6(inplace=True)
              )
            )
            (7): Conv2d(144, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (8): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (9): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(48, 288, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): h_swish(
              (sigmoid): h_sigmoid(
                (relu): ReLU6(inplace=True)
              )
            )
            (3): Conv2d(288, 288, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=288, bias=False)
            (4): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): SELayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=288, out_features=72, bias=True)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=72, out_features=288, bias=True)
                (3): h_sigmoid(
                  (relu): ReLU6(inplace=True)
                )
              )
            )
            (6): h_swish(
              (sigmoid): h_sigmoid(
                (relu): ReLU6(inplace=True)
              )
            )
            (7): Conv2d(288, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (8): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (10): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): h_swish(
              (sigmoid): h_sigmoid(
                (relu): ReLU6(inplace=True)
              )
            )
            (3): Conv2d(576, 576, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): SELayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=576, out_features=144, bias=True)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=144, out_features=576, bias=True)
                (3): h_sigmoid(
                  (relu): ReLU6(inplace=True)
                )
              )
            )
            (6): h_swish(
              (sigmoid): h_sigmoid(
                (relu): ReLU6(inplace=True)
              )
            )
            (7): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (8): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (11): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): h_swish(
              (sigmoid): h_sigmoid(
                (relu): ReLU6(inplace=True)
              )
            )
            (3): Conv2d(576, 576, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): SELayer(
              (avg_pool): AdaptiveAvgPool2d(output_size=1)
              (fc): Sequential(
                (0): Linear(in_features=576, out_features=144, bias=True)
                (1): ReLU(inplace=True)
                (2): Linear(in_features=144, out_features=576, bias=True)
                (3): h_sigmoid(
                  (relu): ReLU6(inplace=True)
                )
              )
            )
            (6): h_swish(
              (sigmoid): h_sigmoid(
                (relu): ReLU6(inplace=True)
              )
            )
            (7): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (8): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (conv): Sequential(
        (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): h_swish(
          (sigmoid): h_sigmoid(
            (relu): ReLU6(inplace=True)
          )
        )
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Sequential(
        (0): Linear(in_features=576, out_features=1024, bias=True)
        (1): h_swish(
          (sigmoid): h_sigmoid(
            (relu): ReLU6(inplace=True)
          )
        )
        (2): Dropout(p=0.2, inplace=False)
        (3): Linear(in_features=1024, out_features=10, bias=True)
      )
    )
  )
)

 Optimizer: SGD (
Parameter Group 0
    dampening: 0
    differentiable: False
    foreach: None
    lr: 0.01
    maximize: False
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.1459, train_acc: 0.1720 test_loss: 1.9422, test_acc: 0.2409, best: 0.2409, time: 0:00:23
 Epoch: 2, lr: 1.0e-02, train_loss: 2.0645, train_acc: 0.2086 test_loss: 1.8143, test_acc: 0.2816, best: 0.2816, time: 0:00:24
 Epoch: 3, lr: 1.0e-02, train_loss: 2.0294, train_acc: 0.2316 test_loss: 1.7726, test_acc: 0.3076, best: 0.3076, time: 0:01:07
 Epoch: 4, lr: 1.0e-02, train_loss: 2.0136, train_acc: 0.2546 test_loss: 1.6120, test_acc: 0.3894, best: 0.3894, time: 0:01:17
 Epoch: 5, lr: 1.0e-02, train_loss: 1.9735, train_acc: 0.2710 test_loss: 1.6763, test_acc: 0.3441, best: 0.3894, time: 0:01:14
 Epoch: 6, lr: 1.0e-02, train_loss: 1.9606, train_acc: 0.2832 test_loss: 1.7338, test_acc: 0.3347, best: 0.3894, time: 0:01:22
 Epoch: 7, lr: 1.0e-02, train_loss: 1.9042, train_acc: 0.3128 test_loss: 1.6076, test_acc: 0.3876, best: 0.3894, time: 0:01:19
 Epoch: 8, lr: 1.0e-02, train_loss: 1.9122, train_acc: 0.3162 test_loss: 1.4614, test_acc: 0.4455, best: 0.4455, time: 0:01:18
 Epoch: 9, lr: 1.0e-02, train_loss: 1.8820, train_acc: 0.3308 test_loss: 1.5560, test_acc: 0.4160, best: 0.4455, time: 0:01:21
 Epoch: 10, lr: 1.0e-02, train_loss: 1.8791, train_acc: 0.3430 test_loss: 1.4443, test_acc: 0.4645, best: 0.4645, time: 0:01:13
 Epoch: 11, lr: 1.0e-02, train_loss: 1.8376, train_acc: 0.3552 test_loss: 1.4044, test_acc: 0.4805, best: 0.4805, time: 0:01:16
 Epoch: 12, lr: 1.0e-02, train_loss: 1.8107, train_acc: 0.3798 test_loss: 1.3379, test_acc: 0.5134, best: 0.5134, time: 0:01:20
 Epoch: 13, lr: 1.0e-02, train_loss: 1.7918, train_acc: 0.3688 test_loss: 1.3684, test_acc: 0.4893, best: 0.5134, time: 0:01:18
 Epoch: 14, lr: 1.0e-02, train_loss: 1.8005, train_acc: 0.3886 test_loss: 1.2750, test_acc: 0.5385, best: 0.5385, time: 0:01:17
 Epoch: 15, lr: 1.0e-02, train_loss: 1.7648, train_acc: 0.4016 test_loss: 1.2133, test_acc: 0.5557, best: 0.5557, time: 0:01:22
 Epoch: 16, lr: 1.0e-02, train_loss: 1.7390, train_acc: 0.4172 test_loss: 1.2884, test_acc: 0.5414, best: 0.5557, time: 0:01:21
 Epoch: 17, lr: 1.0e-02, train_loss: 1.7172, train_acc: 0.4270 test_loss: 1.2363, test_acc: 0.5613, best: 0.5613, time: 0:01:19
 Epoch: 18, lr: 1.0e-02, train_loss: 1.7050, train_acc: 0.4296 test_loss: 1.2140, test_acc: 0.5689, best: 0.5689, time: 0:01:14
 Epoch: 19, lr: 1.0e-02, train_loss: 1.7104, train_acc: 0.4260 test_loss: 1.1423, test_acc: 0.6021, best: 0.6021, time: 0:01:16
 Epoch: 20, lr: 1.0e-02, train_loss: 1.7013, train_acc: 0.4458 test_loss: 1.1779, test_acc: 0.5779, best: 0.6021, time: 0:01:18
 Epoch: 21, lr: 1.0e-02, train_loss: 1.6806, train_acc: 0.4368 test_loss: 1.1689, test_acc: 0.5820, best: 0.6021, time: 0:01:20
 Epoch: 22, lr: 1.0e-02, train_loss: 1.6584, train_acc: 0.4474 test_loss: 1.1617, test_acc: 0.5855, best: 0.6021, time: 0:01:14
 Epoch: 23, lr: 1.0e-02, train_loss: 1.6923, train_acc: 0.4454 test_loss: 1.1482, test_acc: 0.5890, best: 0.6021, time: 0:01:19
 Epoch: 24, lr: 1.0e-02, train_loss: 1.6575, train_acc: 0.4604 test_loss: 1.1265, test_acc: 0.6049, best: 0.6049, time: 0:01:20
 Epoch: 25, lr: 1.0e-02, train_loss: 1.6609, train_acc: 0.4648 test_loss: 1.1800, test_acc: 0.5826, best: 0.6049, time: 0:01:20
 Epoch: 26, lr: 1.0e-02, train_loss: 1.6242, train_acc: 0.4758 test_loss: 1.1310, test_acc: 0.6046, best: 0.6049, time: 0:01:13
 Epoch: 27, lr: 1.0e-02, train_loss: 1.6265, train_acc: 0.4708 test_loss: 1.1948, test_acc: 0.5806, best: 0.6049, time: 0:01:18
 Epoch: 28, lr: 1.0e-02, train_loss: 1.6219, train_acc: 0.4808 test_loss: 1.0837, test_acc: 0.6214, best: 0.6214, time: 0:01:22
 Epoch: 29, lr: 1.0e-02, train_loss: 1.5886, train_acc: 0.4878 test_loss: 1.0704, test_acc: 0.6359, best: 0.6359, time: 0:01:20
 Epoch: 30, lr: 1.0e-02, train_loss: 1.5833, train_acc: 0.4960 test_loss: 1.0740, test_acc: 0.6205, best: 0.6359, time: 0:01:16
 Epoch: 31, lr: 1.0e-02, train_loss: 1.5993, train_acc: 0.4876 test_loss: 1.0395, test_acc: 0.6542, best: 0.6542, time: 0:01:19
 Epoch: 32, lr: 1.0e-02, train_loss: 1.5546, train_acc: 0.5026 test_loss: 1.0401, test_acc: 0.6411, best: 0.6542, time: 0:01:20
 Epoch: 33, lr: 1.0e-02, train_loss: 1.5700, train_acc: 0.5050 test_loss: 1.0664, test_acc: 0.6299, best: 0.6542, time: 0:01:19
 Epoch: 34, lr: 1.0e-02, train_loss: 1.5453, train_acc: 0.5026 test_loss: 0.9894, test_acc: 0.6552, best: 0.6552, time: 0:01:19
 Epoch: 35, lr: 1.0e-02, train_loss: 1.5587, train_acc: 0.5094 test_loss: 0.9528, test_acc: 0.6556, best: 0.6556, time: 0:01:18
 Epoch: 36, lr: 1.0e-02, train_loss: 1.5569, train_acc: 0.5056 test_loss: 1.0522, test_acc: 0.6300, best: 0.6556, time: 0:01:22
 Epoch: 37, lr: 1.0e-02, train_loss: 1.5231, train_acc: 0.5222 test_loss: 0.9762, test_acc: 0.6567, best: 0.6567, time: 0:01:21
 Epoch: 38, lr: 1.0e-02, train_loss: 1.5010, train_acc: 0.5290 test_loss: 0.9861, test_acc: 0.6603, best: 0.6603, time: 0:01:19
 Epoch: 39, lr: 1.0e-02, train_loss: 1.5198, train_acc: 0.5182 test_loss: 0.9876, test_acc: 0.6594, best: 0.6603, time: 0:01:23
 Epoch: 40, lr: 1.0e-02, train_loss: 1.5282, train_acc: 0.5238 test_loss: 0.8958, test_acc: 0.6804, best: 0.6804, time: 0:01:21
 Epoch: 41, lr: 1.0e-02, train_loss: 1.5162, train_acc: 0.5280 test_loss: 0.9926, test_acc: 0.6532, best: 0.6804, time: 0:01:20
 Epoch: 42, lr: 1.0e-02, train_loss: 1.5250, train_acc: 0.5236 test_loss: 0.9637, test_acc: 0.6627, best: 0.6804, time: 0:01:14
 Epoch: 43, lr: 1.0e-02, train_loss: 1.5154, train_acc: 0.5356 test_loss: 1.0025, test_acc: 0.6540, best: 0.6804, time: 0:01:14
 Epoch: 44, lr: 1.0e-02, train_loss: 1.4790, train_acc: 0.5494 test_loss: 0.9550, test_acc: 0.6705, best: 0.6804, time: 0:01:19
 Epoch: 45, lr: 1.0e-02, train_loss: 1.4506, train_acc: 0.5508 test_loss: 0.9569, test_acc: 0.6713, best: 0.6804, time: 0:01:17
 Epoch: 46, lr: 1.0e-02, train_loss: 1.5077, train_acc: 0.5370 test_loss: 0.9252, test_acc: 0.6724, best: 0.6804, time: 0:01:15
 Epoch: 47, lr: 1.0e-02, train_loss: 1.4348, train_acc: 0.5630 test_loss: 0.8729, test_acc: 0.7001, best: 0.7001, time: 0:01:18
 Epoch: 48, lr: 1.0e-02, train_loss: 1.4885, train_acc: 0.5374 test_loss: 0.9200, test_acc: 0.6839, best: 0.7001, time: 0:01:19
 Epoch: 49, lr: 1.0e-02, train_loss: 1.4831, train_acc: 0.5426 test_loss: 0.9199, test_acc: 0.6811, best: 0.7001, time: 0:01:21
 Epoch: 50, lr: 1.0e-02, train_loss: 1.4766, train_acc: 0.5446 test_loss: 0.9332, test_acc: 0.6810, best: 0.7001, time: 0:01:13
 Epoch: 51, lr: 1.0e-02, train_loss: 1.4326, train_acc: 0.5724 test_loss: 0.8745, test_acc: 0.7006, best: 0.7006, time: 0:01:16
 Epoch: 52, lr: 1.0e-02, train_loss: 1.4432, train_acc: 0.5636 test_loss: 0.9298, test_acc: 0.6791, best: 0.7006, time: 0:01:19
 Epoch: 53, lr: 1.0e-02, train_loss: 1.4461, train_acc: 0.5574 test_loss: 0.9071, test_acc: 0.6923, best: 0.7006, time: 0:01:16
 Epoch: 54, lr: 1.0e-02, train_loss: 1.4510, train_acc: 0.5566 test_loss: 0.9495, test_acc: 0.6706, best: 0.7006, time: 0:01:11
 Epoch: 55, lr: 1.0e-02, train_loss: 1.4303, train_acc: 0.5616 test_loss: 0.8985, test_acc: 0.6997, best: 0.7006, time: 0:01:20
 Epoch: 56, lr: 1.0e-02, train_loss: 1.4408, train_acc: 0.5614 test_loss: 0.8738, test_acc: 0.7027, best: 0.7027, time: 0:01:20
 Epoch: 57, lr: 1.0e-02, train_loss: 1.4515, train_acc: 0.5494 test_loss: 0.8693, test_acc: 0.6955, best: 0.7027, time: 0:01:19
 Epoch: 58, lr: 1.0e-02, train_loss: 1.4008, train_acc: 0.5706 test_loss: 0.9316, test_acc: 0.6801, best: 0.7027, time: 0:01:17
 Epoch: 59, lr: 1.0e-02, train_loss: 1.4282, train_acc: 0.5680 test_loss: 0.8472, test_acc: 0.7069, best: 0.7069, time: 0:01:17
 Epoch: 60, lr: 1.0e-02, train_loss: 1.4221, train_acc: 0.5748 test_loss: 0.9146, test_acc: 0.6930, best: 0.7069, time: 0:01:20
 Epoch: 61, lr: 1.0e-02, train_loss: 1.4449, train_acc: 0.5702 test_loss: 0.8433, test_acc: 0.7157, best: 0.7157, time: 0:01:18
 Epoch: 62, lr: 1.0e-02, train_loss: 1.3897, train_acc: 0.5832 test_loss: 0.8396, test_acc: 0.7101, best: 0.7157, time: 0:01:20
 Epoch: 63, lr: 1.0e-02, train_loss: 1.4258, train_acc: 0.5704 test_loss: 0.8251, test_acc: 0.7192, best: 0.7192, time: 0:01:20
 Epoch: 64, lr: 1.0e-02, train_loss: 1.3839, train_acc: 0.5790 test_loss: 0.8172, test_acc: 0.7167, best: 0.7192, time: 0:01:15
 Epoch: 65, lr: 1.0e-02, train_loss: 1.3992, train_acc: 0.5844 test_loss: 0.8236, test_acc: 0.7210, best: 0.7210, time: 0:01:17
 Epoch: 66, lr: 1.0e-02, train_loss: 1.3786, train_acc: 0.5890 test_loss: 0.8266, test_acc: 0.7131, best: 0.7210, time: 0:01:18
 Epoch: 67, lr: 1.0e-02, train_loss: 1.3719, train_acc: 0.5780 test_loss: 0.8870, test_acc: 0.6941, best: 0.7210, time: 0:01:18
 Epoch: 68, lr: 1.0e-02, train_loss: 1.3363, train_acc: 0.5976 test_loss: 0.8242, test_acc: 0.7225, best: 0.7225, time: 0:01:12
 Epoch: 69, lr: 1.0e-02, train_loss: 1.3210, train_acc: 0.6160 test_loss: 0.8218, test_acc: 0.7202, best: 0.7225, time: 0:01:18
 Epoch: 70, lr: 1.0e-02, train_loss: 1.3758, train_acc: 0.5932 test_loss: 0.8525, test_acc: 0.7053, best: 0.7225, time: 0:01:19
 Epoch: 71, lr: 1.0e-02, train_loss: 1.3205, train_acc: 0.6104 test_loss: 0.8746, test_acc: 0.6965, best: 0.7225, time: 0:01:17
 Epoch: 72, lr: 1.0e-02, train_loss: 1.3706, train_acc: 0.5940 test_loss: 0.8176, test_acc: 0.7241, best: 0.7241, time: 0:01:10
 Epoch: 73, lr: 1.0e-02, train_loss: 1.3779, train_acc: 0.5952 test_loss: 0.8015, test_acc: 0.7349, best: 0.7349, time: 0:01:17
 Epoch: 74, lr: 1.0e-02, train_loss: 1.3560, train_acc: 0.5920 test_loss: 0.8107, test_acc: 0.7372, best: 0.7372, time: 0:01:20
 Epoch: 75, lr: 1.0e-02, train_loss: 1.3378, train_acc: 0.6104 test_loss: 0.8303, test_acc: 0.7161, best: 0.7372, time: 0:01:14
 Epoch: 76, lr: 1.0e-02, train_loss: 1.3334, train_acc: 0.6138 test_loss: 0.8824, test_acc: 0.7107, best: 0.7372, time: 0:01:17
 Epoch: 77, lr: 1.0e-02, train_loss: 1.3540, train_acc: 0.6000 test_loss: 0.8385, test_acc: 0.7144, best: 0.7372, time: 0:01:19
 Epoch: 78, lr: 1.0e-02, train_loss: 1.3622, train_acc: 0.5962 test_loss: 0.8548, test_acc: 0.7114, best: 0.7372, time: 0:01:14
 Epoch: 79, lr: 1.0e-02, train_loss: 1.3388, train_acc: 0.6074 test_loss: 0.7995, test_acc: 0.7345, best: 0.7372, time: 0:01:15
 Epoch: 80, lr: 1.0e-02, train_loss: 1.3271, train_acc: 0.6138 test_loss: 0.7464, test_acc: 0.7420, best: 0.7420, time: 0:01:19
 Epoch: 81, lr: 1.0e-02, train_loss: 1.3154, train_acc: 0.6168 test_loss: 0.8372, test_acc: 0.7231, best: 0.7420, time: 0:01:20
 Epoch: 82, lr: 1.0e-02, train_loss: 1.3359, train_acc: 0.6070 test_loss: 0.7960, test_acc: 0.7288, best: 0.7420, time: 0:01:21
 Epoch: 83, lr: 1.0e-02, train_loss: 1.3349, train_acc: 0.6060 test_loss: 0.8658, test_acc: 0.7190, best: 0.7420, time: 0:01:15
 Epoch: 84, lr: 1.0e-02, train_loss: 1.3175, train_acc: 0.6152 test_loss: 0.7674, test_acc: 0.7408, best: 0.7420, time: 0:01:18
 Epoch: 85, lr: 1.0e-02, train_loss: 1.2886, train_acc: 0.6310 test_loss: 0.7729, test_acc: 0.7405, best: 0.7420, time: 0:01:20
 Epoch: 86, lr: 1.0e-02, train_loss: 1.3024, train_acc: 0.6182 test_loss: 0.8431, test_acc: 0.7166, best: 0.7420, time: 0:01:18
 Epoch: 87, lr: 1.0e-02, train_loss: 1.3089, train_acc: 0.6206 test_loss: 0.7808, test_acc: 0.7302, best: 0.7420, time: 0:01:14
 Epoch: 88, lr: 1.0e-02, train_loss: 1.3031, train_acc: 0.6156 test_loss: 0.7441, test_acc: 0.7486, best: 0.7486, time: 0:01:15
 Epoch: 89, lr: 1.0e-02, train_loss: 1.3053, train_acc: 0.6200 test_loss: 0.7457, test_acc: 0.7535, best: 0.7535, time: 0:01:21
 Epoch: 90, lr: 1.0e-02, train_loss: 1.3285, train_acc: 0.6090 test_loss: 0.7714, test_acc: 0.7402, best: 0.7535, time: 0:01:23
 Epoch: 91, lr: 1.0e-02, train_loss: 1.2893, train_acc: 0.6268 test_loss: 0.7844, test_acc: 0.7365, best: 0.7535, time: 0:01:20
 Epoch: 92, lr: 1.0e-02, train_loss: 1.2952, train_acc: 0.6258 test_loss: 0.8031, test_acc: 0.7408, best: 0.7535, time: 0:01:11
 Epoch: 93, lr: 1.0e-02, train_loss: 1.2636, train_acc: 0.6348 test_loss: 0.7964, test_acc: 0.7309, best: 0.7535, time: 0:01:21
 Epoch: 94, lr: 1.0e-02, train_loss: 1.2585, train_acc: 0.6348 test_loss: 0.7781, test_acc: 0.7412, best: 0.7535, time: 0:01:18
 Epoch: 95, lr: 1.0e-02, train_loss: 1.2744, train_acc: 0.6332 test_loss: 0.8142, test_acc: 0.7294, best: 0.7535, time: 0:01:20
 Epoch: 96, lr: 1.0e-02, train_loss: 1.2785, train_acc: 0.6320 test_loss: 0.7541, test_acc: 0.7532, best: 0.7535, time: 0:01:15
 Epoch: 97, lr: 1.0e-02, train_loss: 1.3183, train_acc: 0.6210 test_loss: 0.7820, test_acc: 0.7456, best: 0.7535, time: 0:01:16
 Epoch: 98, lr: 1.0e-02, train_loss: 1.2797, train_acc: 0.6282 test_loss: 0.7605, test_acc: 0.7574, best: 0.7574, time: 0:01:20
 Epoch: 99, lr: 1.0e-02, train_loss: 1.2978, train_acc: 0.6364 test_loss: 0.7998, test_acc: 0.7316, best: 0.7574, time: 0:01:19
 Epoch: 100, lr: 1.0e-02, train_loss: 1.2756, train_acc: 0.6378 test_loss: 0.7421, test_acc: 0.7550, best: 0.7574, time: 0:01:20
 Epoch: 101, lr: 1.0e-02, train_loss: 1.2590, train_acc: 0.6460 test_loss: 0.7502, test_acc: 0.7545, best: 0.7574, time: 0:01:18
 Epoch: 102, lr: 1.0e-02, train_loss: 1.2614, train_acc: 0.6454 test_loss: 0.8266, test_acc: 0.7406, best: 0.7574, time: 0:01:16
 Epoch: 103, lr: 1.0e-02, train_loss: 1.2446, train_acc: 0.6396 test_loss: 0.6873, test_acc: 0.7710, best: 0.7710, time: 0:01:19
 Epoch: 104, lr: 1.0e-02, train_loss: 1.2715, train_acc: 0.6444 test_loss: 0.7397, test_acc: 0.7548, best: 0.7710, time: 0:01:20
 Epoch: 105, lr: 1.0e-02, train_loss: 1.2723, train_acc: 0.6388 test_loss: 0.7261, test_acc: 0.7581, best: 0.7710, time: 0:01:18
 Epoch: 106, lr: 1.0e-02, train_loss: 1.2549, train_acc: 0.6448 test_loss: 0.7173, test_acc: 0.7669, best: 0.7710, time: 0:01:16
 Epoch: 107, lr: 1.0e-02, train_loss: 1.2632, train_acc: 0.6442 test_loss: 0.8053, test_acc: 0.7482, best: 0.7710, time: 0:01:21
 Epoch: 108, lr: 1.0e-02, train_loss: 1.2810, train_acc: 0.6480 test_loss: 0.8155, test_acc: 0.7261, best: 0.7710, time: 0:01:20
 Epoch: 109, lr: 1.0e-02, train_loss: 1.2451, train_acc: 0.6540 test_loss: 0.7618, test_acc: 0.7624, best: 0.7710, time: 0:01:18
 Epoch: 110, lr: 1.0e-02, train_loss: 1.2654, train_acc: 0.6368 test_loss: 0.7177, test_acc: 0.7614, best: 0.7710, time: 0:01:17
 Epoch: 111, lr: 1.0e-02, train_loss: 1.2421, train_acc: 0.6462 test_loss: 0.7748, test_acc: 0.7416, best: 0.7710, time: 0:01:18
 Epoch: 112, lr: 1.0e-02, train_loss: 1.2320, train_acc: 0.6622 test_loss: 0.7512, test_acc: 0.7565, best: 0.7710, time: 0:01:16
 Epoch: 113, lr: 1.0e-02, train_loss: 1.2250, train_acc: 0.6542 test_loss: 0.7694, test_acc: 0.7452, best: 0.7710, time: 0:01:19
 Epoch: 114, lr: 1.0e-02, train_loss: 1.2554, train_acc: 0.6492 test_loss: 0.7991, test_acc: 0.7418, best: 0.7710, time: 0:01:19
 Epoch: 115, lr: 1.0e-02, train_loss: 1.2356, train_acc: 0.6610 test_loss: 0.7101, test_acc: 0.7801, best: 0.7801, time: 0:01:16
 Epoch: 116, lr: 1.0e-02, train_loss: 1.2585, train_acc: 0.6480 test_loss: 0.7361, test_acc: 0.7639, best: 0.7801, time: 0:01:16
 Epoch: 117, lr: 1.0e-02, train_loss: 1.2153, train_acc: 0.6600 test_loss: 0.7314, test_acc: 0.7711, best: 0.7801, time: 0:01:18
 Epoch: 118, lr: 1.0e-02, train_loss: 1.2128, train_acc: 0.6500 test_loss: 0.7210, test_acc: 0.7589, best: 0.7801, time: 0:01:21
 Epoch: 119, lr: 1.0e-02, train_loss: 1.2522, train_acc: 0.6430 test_loss: 0.7568, test_acc: 0.7538, best: 0.7801, time: 0:01:21
 Epoch: 120, lr: 1.0e-02, train_loss: 1.2189, train_acc: 0.6658 test_loss: 0.7063, test_acc: 0.7774, best: 0.7801, time: 0:01:22
 Epoch: 121, lr: 1.0e-02, train_loss: 1.2391, train_acc: 0.6502 test_loss: 0.7055, test_acc: 0.7765, best: 0.7801, time: 0:01:19
 Epoch: 122, lr: 1.0e-02, train_loss: 1.2077, train_acc: 0.6624 test_loss: 0.7088, test_acc: 0.7731, best: 0.7801, time: 0:01:13
 Epoch: 123, lr: 1.0e-02, train_loss: 1.1757, train_acc: 0.6664 test_loss: 0.7134, test_acc: 0.7873, best: 0.7873, time: 0:01:18
 Epoch: 124, lr: 1.0e-02, train_loss: 1.2073, train_acc: 0.6644 test_loss: 0.7349, test_acc: 0.7710, best: 0.7873, time: 0:01:19
 Epoch: 125, lr: 1.0e-02, train_loss: 1.2220, train_acc: 0.6650 test_loss: 0.7794, test_acc: 0.7564, best: 0.7873, time: 0:01:19
 Epoch: 126, lr: 1.0e-02, train_loss: 1.1984, train_acc: 0.6710 test_loss: 0.7209, test_acc: 0.7721, best: 0.7873, time: 0:01:17
 Epoch: 127, lr: 1.0e-02, train_loss: 1.2432, train_acc: 0.6568 test_loss: 0.7034, test_acc: 0.7811, best: 0.7873, time: 0:01:16
 Epoch: 128, lr: 1.0e-02, train_loss: 1.1896, train_acc: 0.6838 test_loss: 0.7709, test_acc: 0.7511, best: 0.7873, time: 0:01:18
 Epoch: 129, lr: 1.0e-02, train_loss: 1.1462, train_acc: 0.6878 test_loss: 0.6859, test_acc: 0.7806, best: 0.7873, time: 0:01:18
 Epoch: 130, lr: 1.0e-02, train_loss: 1.2104, train_acc: 0.6694 test_loss: 0.8250, test_acc: 0.7246, best: 0.7873, time: 0:01:19
 Epoch: 131, lr: 1.0e-02, train_loss: 1.2424, train_acc: 0.6516 test_loss: 0.6980, test_acc: 0.7680, best: 0.7873, time: 0:01:19
 Epoch: 132, lr: 1.0e-02, train_loss: 1.1997, train_acc: 0.6698 test_loss: 0.7600, test_acc: 0.7568, best: 0.7873, time: 0:01:15
 Epoch: 133, lr: 1.0e-02, train_loss: 1.1786, train_acc: 0.6678 test_loss: 0.7165, test_acc: 0.7728, best: 0.7873, time: 0:01:16
 Epoch: 134, lr: 1.0e-02, train_loss: 1.2224, train_acc: 0.6666 test_loss: 0.7318, test_acc: 0.7662, best: 0.7873, time: 0:01:21
 Epoch: 135, lr: 1.0e-02, train_loss: 1.1968, train_acc: 0.6598 test_loss: 0.7096, test_acc: 0.7726, best: 0.7873, time: 0:01:21
 Epoch: 136, lr: 1.0e-02, train_loss: 1.1739, train_acc: 0.6796 test_loss: 0.6963, test_acc: 0.7699, best: 0.7873, time: 0:01:20
 Epoch: 137, lr: 1.0e-02, train_loss: 1.1714, train_acc: 0.6818 test_loss: 0.6893, test_acc: 0.7847, best: 0.7873, time: 0:01:23
 Epoch: 138, lr: 1.0e-02, train_loss: 1.1721, train_acc: 0.6832 test_loss: 0.7438, test_acc: 0.7718, best: 0.7873, time: 0:01:15
 Epoch: 139, lr: 1.0e-02, train_loss: 1.1772, train_acc: 0.6752 test_loss: 0.6872, test_acc: 0.7812, best: 0.7873, time: 0:01:21
 Epoch: 140, lr: 1.0e-02, train_loss: 1.2093, train_acc: 0.6684 test_loss: 0.7067, test_acc: 0.7748, best: 0.7873, time: 0:01:19
 Epoch: 141, lr: 1.0e-02, train_loss: 1.1829, train_acc: 0.6778 test_loss: 0.7267, test_acc: 0.7772, best: 0.7873, time: 0:01:19
 Epoch: 142, lr: 1.0e-02, train_loss: 1.1787, train_acc: 0.6764 test_loss: 0.7100, test_acc: 0.7672, best: 0.7873, time: 0:01:19
 Epoch: 143, lr: 1.0e-02, train_loss: 1.1698, train_acc: 0.6758 test_loss: 0.7365, test_acc: 0.7841, best: 0.7873, time: 0:01:21
 Epoch: 144, lr: 1.0e-02, train_loss: 1.1738, train_acc: 0.6812 test_loss: 0.6995, test_acc: 0.7792, best: 0.7873, time: 0:01:21
 Epoch: 145, lr: 1.0e-02, train_loss: 1.1673, train_acc: 0.6880 test_loss: 0.7764, test_acc: 0.7758, best: 0.7873, time: 0:01:17
 Epoch: 146, lr: 1.0e-02, train_loss: 1.1603, train_acc: 0.6802 test_loss: 0.7325, test_acc: 0.7676, best: 0.7873, time: 0:01:19
 Epoch: 147, lr: 1.0e-02, train_loss: 1.1687, train_acc: 0.6728 test_loss: 0.7347, test_acc: 0.7732, best: 0.7873, time: 0:01:17
 Epoch: 148, lr: 1.0e-02, train_loss: 1.1919, train_acc: 0.6744 test_loss: 0.7088, test_acc: 0.7744, best: 0.7873, time: 0:01:18
 Epoch: 149, lr: 1.0e-02, train_loss: 1.2044, train_acc: 0.6694 test_loss: 0.6960, test_acc: 0.7764, best: 0.7873, time: 0:01:22
 Epoch: 150, lr: 1.0e-02, train_loss: 1.1617, train_acc: 0.6858 test_loss: 0.6920, test_acc: 0.7796, best: 0.7873, time: 0:01:20
 Epoch: 151, lr: 1.0e-02, train_loss: 1.1993, train_acc: 0.6798 test_loss: 0.6883, test_acc: 0.7939, best: 0.7939, time: 0:01:19
 Epoch: 152, lr: 1.0e-02, train_loss: 1.1654, train_acc: 0.6744 test_loss: 0.7826, test_acc: 0.7534, best: 0.7939, time: 0:01:14
 Epoch: 153, lr: 1.0e-02, train_loss: 1.1622, train_acc: 0.6906 test_loss: 0.7205, test_acc: 0.7725, best: 0.7939, time: 0:01:21
 Epoch: 154, lr: 1.0e-02, train_loss: 1.1477, train_acc: 0.6876 test_loss: 0.7145, test_acc: 0.7820, best: 0.7939, time: 0:01:21
 Epoch: 155, lr: 1.0e-02, train_loss: 1.1437, train_acc: 0.6924 test_loss: 0.7025, test_acc: 0.7796, best: 0.7939, time: 0:01:16
 Epoch: 156, lr: 1.0e-02, train_loss: 1.1607, train_acc: 0.6808 test_loss: 0.7564, test_acc: 0.7702, best: 0.7939, time: 0:01:17
 Epoch: 157, lr: 1.0e-02, train_loss: 1.1656, train_acc: 0.6836 test_loss: 0.7413, test_acc: 0.7666, best: 0.7939, time: 0:01:20
 Epoch: 158, lr: 1.0e-02, train_loss: 1.1330, train_acc: 0.6976 test_loss: 0.7585, test_acc: 0.7765, best: 0.7939, time: 0:01:17
 Epoch: 159, lr: 1.0e-02, train_loss: 1.2069, train_acc: 0.6698 test_loss: 0.6709, test_acc: 0.7929, best: 0.7939, time: 0:01:19
 Epoch: 160, lr: 1.0e-02, train_loss: 1.1472, train_acc: 0.6886 test_loss: 0.7212, test_acc: 0.7724, best: 0.7939, time: 0:01:21
 Epoch: 161, lr: 1.0e-02, train_loss: 1.1183, train_acc: 0.7028 test_loss: 0.7536, test_acc: 0.7746, best: 0.7939, time: 0:01:24
 Epoch: 162, lr: 1.0e-02, train_loss: 1.1327, train_acc: 0.7074 test_loss: 0.6888, test_acc: 0.7853, best: 0.7939, time: 0:01:16
 Epoch: 163, lr: 1.0e-02, train_loss: 1.1549, train_acc: 0.6906 test_loss: 0.7404, test_acc: 0.7686, best: 0.7939, time: 0:01:12
 Epoch: 164, lr: 1.0e-02, train_loss: 1.1517, train_acc: 0.6914 test_loss: 0.7830, test_acc: 0.7709, best: 0.7939, time: 0:01:19
 Epoch: 165, lr: 1.0e-02, train_loss: 1.1269, train_acc: 0.6936 test_loss: 0.7295, test_acc: 0.7748, best: 0.7939, time: 0:01:19
 Epoch: 166, lr: 1.0e-02, train_loss: 1.1180, train_acc: 0.7072 test_loss: 0.7005, test_acc: 0.7915, best: 0.7939, time: 0:01:19
 Epoch: 167, lr: 1.0e-02, train_loss: 1.1300, train_acc: 0.7074 test_loss: 0.6808, test_acc: 0.7894, best: 0.7939, time: 0:01:16
 Epoch: 168, lr: 1.0e-02, train_loss: 1.1119, train_acc: 0.7104 test_loss: 0.7172, test_acc: 0.7867, best: 0.7939, time: 0:01:15
 Epoch: 169, lr: 1.0e-02, train_loss: 1.1007, train_acc: 0.7056 test_loss: 0.6804, test_acc: 0.7845, best: 0.7939, time: 0:01:19
 Epoch: 170, lr: 1.0e-02, train_loss: 1.1090, train_acc: 0.7110 test_loss: 0.6923, test_acc: 0.7873, best: 0.7939, time: 0:01:19
 Epoch: 171, lr: 1.0e-02, train_loss: 1.1516, train_acc: 0.6932 test_loss: 0.7994, test_acc: 0.7636, best: 0.7939, time: 0:00:47
 Epoch: 172, lr: 1.0e-02, train_loss: 1.1392, train_acc: 0.6936 test_loss: 0.6629, test_acc: 0.7959, best: 0.7959, time: 0:00:23
 Epoch: 173, lr: 1.0e-02, train_loss: 1.0916, train_acc: 0.7020 test_loss: 0.6204, test_acc: 0.8107, best: 0.8107, time: 0:00:22
 Epoch: 174, lr: 1.0e-02, train_loss: 1.1740, train_acc: 0.6866 test_loss: 0.6571, test_acc: 0.7976, best: 0.8107, time: 0:00:22
 Epoch: 175, lr: 1.0e-02, train_loss: 1.0744, train_acc: 0.7166 test_loss: 0.6667, test_acc: 0.8031, best: 0.8107, time: 0:00:23
 Epoch: 176, lr: 1.0e-02, train_loss: 1.1333, train_acc: 0.6952 test_loss: 0.7873, test_acc: 0.7802, best: 0.8107, time: 0:00:22
 Epoch: 177, lr: 1.0e-02, train_loss: 1.0744, train_acc: 0.7176 test_loss: 0.6377, test_acc: 0.8045, best: 0.8107, time: 0:00:22
 Epoch: 178, lr: 1.0e-02, train_loss: 1.1176, train_acc: 0.7126 test_loss: 0.6636, test_acc: 0.7933, best: 0.8107, time: 0:00:22
 Epoch: 179, lr: 1.0e-02, train_loss: 1.1408, train_acc: 0.7022 test_loss: 0.6945, test_acc: 0.7954, best: 0.8107, time: 0:00:22
 Epoch: 180, lr: 2.0e-03, train_loss: 1.0791, train_acc: 0.7232 test_loss: 0.6858, test_acc: 0.8050, best: 0.8107, time: 0:00:22
 Epoch: 181, lr: 2.0e-03, train_loss: 1.0309, train_acc: 0.7462 test_loss: 0.6928, test_acc: 0.8049, best: 0.8107, time: 0:00:22
 Epoch: 182, lr: 2.0e-03, train_loss: 1.0339, train_acc: 0.7460 test_loss: 0.6152, test_acc: 0.8160, best: 0.8160, time: 0:00:22
 Epoch: 183, lr: 2.0e-03, train_loss: 1.0314, train_acc: 0.7438 test_loss: 0.6957, test_acc: 0.8169, best: 0.8169, time: 0:00:22
 Epoch: 184, lr: 2.0e-03, train_loss: 0.9948, train_acc: 0.7422 test_loss: 0.5949, test_acc: 0.8223, best: 0.8223, time: 0:00:23
 Epoch: 185, lr: 2.0e-03, train_loss: 1.0096, train_acc: 0.7488 test_loss: 0.5969, test_acc: 0.8265, best: 0.8265, time: 0:00:22
 Epoch: 186, lr: 2.0e-03, train_loss: 1.0464, train_acc: 0.7360 test_loss: 0.6369, test_acc: 0.8246, best: 0.8265, time: 0:00:22
 Epoch: 187, lr: 2.0e-03, train_loss: 0.9879, train_acc: 0.7524 test_loss: 0.6142, test_acc: 0.8159, best: 0.8265, time: 0:00:22
 Epoch: 188, lr: 2.0e-03, train_loss: 1.0072, train_acc: 0.7490 test_loss: 0.6055, test_acc: 0.8193, best: 0.8265, time: 0:00:22
 Epoch: 189, lr: 2.0e-03, train_loss: 1.0304, train_acc: 0.7450 test_loss: 0.6831, test_acc: 0.8140, best: 0.8265, time: 0:00:22
 Epoch: 190, lr: 2.0e-03, train_loss: 1.0036, train_acc: 0.7508 test_loss: 0.5790, test_acc: 0.8265, best: 0.8265, time: 0:00:22
 Epoch: 191, lr: 2.0e-03, train_loss: 0.9834, train_acc: 0.7502 test_loss: 0.6171, test_acc: 0.8189, best: 0.8265, time: 0:00:22
 Epoch: 192, lr: 2.0e-03, train_loss: 0.9816, train_acc: 0.7564 test_loss: 0.6354, test_acc: 0.8215, best: 0.8265, time: 0:00:22
 Epoch: 193, lr: 2.0e-03, train_loss: 1.0026, train_acc: 0.7544 test_loss: 0.6779, test_acc: 0.8140, best: 0.8265, time: 0:00:22
 Epoch: 194, lr: 2.0e-03, train_loss: 0.9873, train_acc: 0.7524 test_loss: 0.6174, test_acc: 0.8234, best: 0.8265, time: 0:00:22
 Epoch: 195, lr: 2.0e-03, train_loss: 1.0171, train_acc: 0.7516 test_loss: 0.6281, test_acc: 0.8219, best: 0.8265, time: 0:00:22
 Epoch: 196, lr: 2.0e-03, train_loss: 1.0019, train_acc: 0.7586 test_loss: 0.6233, test_acc: 0.8263, best: 0.8265, time: 0:00:22
 Epoch: 197, lr: 2.0e-03, train_loss: 0.9743, train_acc: 0.7682 test_loss: 0.6173, test_acc: 0.8176, best: 0.8265, time: 0:00:22
 Epoch: 198, lr: 2.0e-03, train_loss: 0.9913, train_acc: 0.7540 test_loss: 0.6521, test_acc: 0.8180, best: 0.8265, time: 0:00:22
 Epoch: 199, lr: 2.0e-03, train_loss: 0.9925, train_acc: 0.7626 test_loss: 0.6307, test_acc: 0.8241, best: 0.8265, time: 0:00:22
 Epoch: 200, lr: 2.0e-03, train_loss: 0.9828, train_acc: 0.7528 test_loss: 0.6489, test_acc: 0.8209, best: 0.8265, time: 0:00:23
 Epoch: 201, lr: 2.0e-03, train_loss: 0.9746, train_acc: 0.7562 test_loss: 0.6843, test_acc: 0.8200, best: 0.8265, time: 0:00:23
 Epoch: 202, lr: 2.0e-03, train_loss: 1.0220, train_acc: 0.7498 test_loss: 0.6094, test_acc: 0.8229, best: 0.8265, time: 0:00:23
 Epoch: 203, lr: 2.0e-03, train_loss: 0.9860, train_acc: 0.7618 test_loss: 0.6497, test_acc: 0.8139, best: 0.8265, time: 0:00:23
 Epoch: 204, lr: 2.0e-03, train_loss: 0.9714, train_acc: 0.7632 test_loss: 0.6087, test_acc: 0.8204, best: 0.8265, time: 0:00:22
 Epoch: 205, lr: 2.0e-03, train_loss: 0.9653, train_acc: 0.7648 test_loss: 0.6294, test_acc: 0.8204, best: 0.8265, time: 0:00:22
 Epoch: 206, lr: 2.0e-03, train_loss: 0.9655, train_acc: 0.7638 test_loss: 0.6184, test_acc: 0.8224, best: 0.8265, time: 0:00:22
 Epoch: 207, lr: 2.0e-03, train_loss: 1.0150, train_acc: 0.7478 test_loss: 0.6082, test_acc: 0.8220, best: 0.8265, time: 0:00:23
 Epoch: 208, lr: 2.0e-03, train_loss: 0.9856, train_acc: 0.7520 test_loss: 0.6035, test_acc: 0.8244, best: 0.8265, time: 0:00:22
 Epoch: 209, lr: 2.0e-03, train_loss: 0.9950, train_acc: 0.7608 test_loss: 0.6067, test_acc: 0.8209, best: 0.8265, time: 0:00:22
 Epoch: 210, lr: 2.0e-03, train_loss: 1.0436, train_acc: 0.7458 test_loss: 0.6824, test_acc: 0.8130, best: 0.8265, time: 0:00:22
 Epoch: 211, lr: 2.0e-03, train_loss: 0.9968, train_acc: 0.7556 test_loss: 0.6487, test_acc: 0.8274, best: 0.8274, time: 0:00:22
 Epoch: 212, lr: 2.0e-03, train_loss: 0.9717, train_acc: 0.7628 test_loss: 0.6116, test_acc: 0.8204, best: 0.8274, time: 0:00:22
 Epoch: 213, lr: 2.0e-03, train_loss: 0.9889, train_acc: 0.7538 test_loss: 0.6763, test_acc: 0.8175, best: 0.8274, time: 0:00:23
 Epoch: 214, lr: 2.0e-03, train_loss: 0.9558, train_acc: 0.7618 test_loss: 0.5981, test_acc: 0.8269, best: 0.8274, time: 0:00:23
 Epoch: 215, lr: 2.0e-03, train_loss: 0.9695, train_acc: 0.7594 test_loss: 0.6152, test_acc: 0.8209, best: 0.8274, time: 0:00:23
 Epoch: 216, lr: 2.0e-03, train_loss: 1.0002, train_acc: 0.7552 test_loss: 0.6581, test_acc: 0.8200, best: 0.8274, time: 0:00:22
 Epoch: 217, lr: 2.0e-03, train_loss: 1.0125, train_acc: 0.7522 test_loss: 0.6259, test_acc: 0.8251, best: 0.8274, time: 0:00:23
 Epoch: 218, lr: 2.0e-03, train_loss: 1.0007, train_acc: 0.7442 test_loss: 0.6710, test_acc: 0.8176, best: 0.8274, time: 0:00:23
 Epoch: 219, lr: 2.0e-03, train_loss: 0.9715, train_acc: 0.7612 test_loss: 0.6272, test_acc: 0.8235, best: 0.8274, time: 0:00:22
 Epoch: 220, lr: 2.0e-03, train_loss: 0.9486, train_acc: 0.7788 test_loss: 0.6394, test_acc: 0.8204, best: 0.8274, time: 0:00:22
 Epoch: 221, lr: 2.0e-03, train_loss: 0.9525, train_acc: 0.7668 test_loss: 0.6596, test_acc: 0.8167, best: 0.8274, time: 0:00:22
 Epoch: 222, lr: 2.0e-03, train_loss: 0.9618, train_acc: 0.7726 test_loss: 0.5882, test_acc: 0.8251, best: 0.8274, time: 0:00:23
 Epoch: 223, lr: 2.0e-03, train_loss: 0.9623, train_acc: 0.7676 test_loss: 0.6608, test_acc: 0.8161, best: 0.8274, time: 0:00:22
 Epoch: 224, lr: 2.0e-03, train_loss: 0.9516, train_acc: 0.7762 test_loss: 0.6099, test_acc: 0.8245, best: 0.8274, time: 0:00:22
 Epoch: 225, lr: 2.0e-03, train_loss: 0.9394, train_acc: 0.7706 test_loss: 0.6372, test_acc: 0.8197, best: 0.8274, time: 0:00:23
 Epoch: 226, lr: 2.0e-03, train_loss: 1.0015, train_acc: 0.7558 test_loss: 0.6407, test_acc: 0.8193, best: 0.8274, time: 0:00:23
 Epoch: 227, lr: 2.0e-03, train_loss: 0.9712, train_acc: 0.7652 test_loss: 0.6457, test_acc: 0.8177, best: 0.8274, time: 0:00:22
 Epoch: 228, lr: 2.0e-03, train_loss: 0.9608, train_acc: 0.7640 test_loss: 0.5946, test_acc: 0.8290, best: 0.8290, time: 0:00:23
 Epoch: 229, lr: 2.0e-03, train_loss: 0.9989, train_acc: 0.7658 test_loss: 0.6403, test_acc: 0.8150, best: 0.8290, time: 0:00:23
 Epoch: 230, lr: 2.0e-03, train_loss: 0.9652, train_acc: 0.7592 test_loss: 0.6329, test_acc: 0.8189, best: 0.8290, time: 0:00:22
 Epoch: 231, lr: 2.0e-03, train_loss: 0.9323, train_acc: 0.7802 test_loss: 0.6609, test_acc: 0.8137, best: 0.8290, time: 0:00:23
 Epoch: 232, lr: 2.0e-03, train_loss: 0.9383, train_acc: 0.7720 test_loss: 0.5927, test_acc: 0.8290, best: 0.8290, time: 0:00:22
 Epoch: 233, lr: 2.0e-03, train_loss: 0.9539, train_acc: 0.7728 test_loss: 0.5838, test_acc: 0.8275, best: 0.8290, time: 0:00:23
 Epoch: 234, lr: 2.0e-03, train_loss: 0.9769, train_acc: 0.7704 test_loss: 0.6847, test_acc: 0.8103, best: 0.8290, time: 0:00:23
 Epoch: 235, lr: 2.0e-03, train_loss: 0.9701, train_acc: 0.7700 test_loss: 0.6719, test_acc: 0.8195, best: 0.8290, time: 0:00:23
 Epoch: 236, lr: 2.0e-03, train_loss: 0.9241, train_acc: 0.7742 test_loss: 0.6195, test_acc: 0.8254, best: 0.8290, time: 0:00:23
 Epoch: 237, lr: 2.0e-03, train_loss: 0.9163, train_acc: 0.7792 test_loss: 0.6360, test_acc: 0.8215, best: 0.8290, time: 0:00:23
 Epoch: 238, lr: 2.0e-03, train_loss: 0.9688, train_acc: 0.7626 test_loss: 0.6141, test_acc: 0.8231, best: 0.8290, time: 0:00:23
 Epoch: 239, lr: 2.0e-03, train_loss: 0.9574, train_acc: 0.7674 test_loss: 0.6972, test_acc: 0.8161, best: 0.8290, time: 0:00:23
 Epoch: 240, lr: 4.0e-04, train_loss: 0.9613, train_acc: 0.7724 test_loss: 0.6461, test_acc: 0.8181, best: 0.8290, time: 0:00:23
 Epoch: 241, lr: 4.0e-04, train_loss: 0.9278, train_acc: 0.7848 test_loss: 0.6862, test_acc: 0.8193, best: 0.8290, time: 0:00:22
 Epoch: 242, lr: 4.0e-04, train_loss: 0.9597, train_acc: 0.7742 test_loss: 0.6638, test_acc: 0.8243, best: 0.8290, time: 0:00:23
 Epoch: 243, lr: 4.0e-04, train_loss: 0.9158, train_acc: 0.7908 test_loss: 0.6108, test_acc: 0.8277, best: 0.8290, time: 0:00:22
 Epoch: 244, lr: 4.0e-04, train_loss: 0.9300, train_acc: 0.7852 test_loss: 0.6646, test_acc: 0.8244, best: 0.8290, time: 0:00:22
 Epoch: 245, lr: 4.0e-04, train_loss: 0.9677, train_acc: 0.7682 test_loss: 0.6086, test_acc: 0.8295, best: 0.8295, time: 0:00:22
 Epoch: 246, lr: 4.0e-04, train_loss: 0.9463, train_acc: 0.7786 test_loss: 0.6882, test_acc: 0.8211, best: 0.8295, time: 0:00:22
 Epoch: 247, lr: 4.0e-04, train_loss: 0.9450, train_acc: 0.7736 test_loss: 0.6124, test_acc: 0.8293, best: 0.8295, time: 0:00:22
 Epoch: 248, lr: 4.0e-04, train_loss: 0.9478, train_acc: 0.7780 test_loss: 0.6594, test_acc: 0.8246, best: 0.8295, time: 0:00:22
 Epoch: 249, lr: 4.0e-04, train_loss: 0.9465, train_acc: 0.7754 test_loss: 0.5949, test_acc: 0.8333, best: 0.8333, time: 0:00:22
 Epoch: 250, lr: 4.0e-04, train_loss: 0.9382, train_acc: 0.7764 test_loss: 0.5941, test_acc: 0.8315, best: 0.8333, time: 0:00:22
 Epoch: 251, lr: 4.0e-04, train_loss: 0.9460, train_acc: 0.7716 test_loss: 0.6093, test_acc: 0.8330, best: 0.8333, time: 0:00:23
 Epoch: 252, lr: 4.0e-04, train_loss: 0.9518, train_acc: 0.7818 test_loss: 0.5890, test_acc: 0.8334, best: 0.8334, time: 0:00:23
 Epoch: 253, lr: 4.0e-04, train_loss: 0.9238, train_acc: 0.7822 test_loss: 0.5954, test_acc: 0.8315, best: 0.8334, time: 0:00:23
 Epoch: 254, lr: 4.0e-04, train_loss: 0.9222, train_acc: 0.7814 test_loss: 0.6051, test_acc: 0.8321, best: 0.8334, time: 0:00:22
 Epoch: 255, lr: 4.0e-04, train_loss: 0.9342, train_acc: 0.7698 test_loss: 0.6405, test_acc: 0.8284, best: 0.8334, time: 0:00:22
 Epoch: 256, lr: 4.0e-04, train_loss: 0.9063, train_acc: 0.7876 test_loss: 0.5988, test_acc: 0.8314, best: 0.8334, time: 0:00:22
 Epoch: 257, lr: 4.0e-04, train_loss: 0.9034, train_acc: 0.7760 test_loss: 0.6120, test_acc: 0.8267, best: 0.8334, time: 0:00:22
 Epoch: 258, lr: 4.0e-04, train_loss: 0.9234, train_acc: 0.7882 test_loss: 0.5922, test_acc: 0.8279, best: 0.8334, time: 0:00:22
 Epoch: 259, lr: 4.0e-04, train_loss: 0.9502, train_acc: 0.7772 test_loss: 0.6344, test_acc: 0.8239, best: 0.8334, time: 0:00:22
 Epoch: 260, lr: 4.0e-04, train_loss: 0.9343, train_acc: 0.7780 test_loss: 0.6741, test_acc: 0.8236, best: 0.8334, time: 0:00:22
 Epoch: 261, lr: 4.0e-04, train_loss: 0.9057, train_acc: 0.7914 test_loss: 0.5980, test_acc: 0.8321, best: 0.8334, time: 0:00:22
 Epoch: 262, lr: 4.0e-04, train_loss: 0.9430, train_acc: 0.7856 test_loss: 0.6079, test_acc: 0.8310, best: 0.8334, time: 0:00:22
 Epoch: 263, lr: 4.0e-04, train_loss: 0.9456, train_acc: 0.7758 test_loss: 0.6584, test_acc: 0.8286, best: 0.8334, time: 0:00:22
 Epoch: 264, lr: 4.0e-04, train_loss: 0.9093, train_acc: 0.7852 test_loss: 0.6387, test_acc: 0.8295, best: 0.8334, time: 0:00:22
 Epoch: 265, lr: 4.0e-04, train_loss: 0.9585, train_acc: 0.7738 test_loss: 0.5955, test_acc: 0.8321, best: 0.8334, time: 0:00:22
 Epoch: 266, lr: 4.0e-04, train_loss: 0.9458, train_acc: 0.7792 test_loss: 0.5807, test_acc: 0.8344, best: 0.8344, time: 0:00:22
 Epoch: 267, lr: 4.0e-04, train_loss: 0.9155, train_acc: 0.7816 test_loss: 0.6175, test_acc: 0.8289, best: 0.8344, time: 0:00:22
 Epoch: 268, lr: 4.0e-04, train_loss: 0.9143, train_acc: 0.7792 test_loss: 0.6116, test_acc: 0.8279, best: 0.8344, time: 0:00:22
 Epoch: 269, lr: 4.0e-04, train_loss: 0.9424, train_acc: 0.7746 test_loss: 0.6208, test_acc: 0.8306, best: 0.8344, time: 0:00:22
 Epoch: 270, lr: 8.0e-05, train_loss: 0.9340, train_acc: 0.7708 test_loss: 0.6469, test_acc: 0.8277, best: 0.8344, time: 0:00:22
 Epoch: 271, lr: 8.0e-05, train_loss: 0.9250, train_acc: 0.7770 test_loss: 0.5895, test_acc: 0.8341, best: 0.8344, time: 0:00:23
 Epoch: 272, lr: 8.0e-05, train_loss: 0.9425, train_acc: 0.7810 test_loss: 0.6345, test_acc: 0.8320, best: 0.8344, time: 0:00:23
 Epoch: 273, lr: 8.0e-05, train_loss: 0.9411, train_acc: 0.7758 test_loss: 0.6635, test_acc: 0.8267, best: 0.8344, time: 0:00:23
 Epoch: 274, lr: 8.0e-05, train_loss: 0.9193, train_acc: 0.7886 test_loss: 0.6238, test_acc: 0.8305, best: 0.8344, time: 0:00:22
 Epoch: 275, lr: 8.0e-05, train_loss: 0.9110, train_acc: 0.7796 test_loss: 0.6087, test_acc: 0.8349, best: 0.8349, time: 0:00:23
 Epoch: 276, lr: 8.0e-05, train_loss: 0.9047, train_acc: 0.7890 test_loss: 0.5921, test_acc: 0.8327, best: 0.8349, time: 0:00:22
 Epoch: 277, lr: 8.0e-05, train_loss: 0.9226, train_acc: 0.7846 test_loss: 0.6088, test_acc: 0.8296, best: 0.8349, time: 0:00:22
 Epoch: 278, lr: 8.0e-05, train_loss: 0.9127, train_acc: 0.7866 test_loss: 0.6391, test_acc: 0.8277, best: 0.8349, time: 0:00:22
 Epoch: 279, lr: 8.0e-05, train_loss: 0.9692, train_acc: 0.7740 test_loss: 0.6815, test_acc: 0.8230, best: 0.8349, time: 0:00:22
 Epoch: 280, lr: 8.0e-05, train_loss: 0.9268, train_acc: 0.7806 test_loss: 0.6200, test_acc: 0.8340, best: 0.8349, time: 0:00:23
 Epoch: 281, lr: 8.0e-05, train_loss: 0.9006, train_acc: 0.7912 test_loss: 0.5898, test_acc: 0.8313, best: 0.8349, time: 0:00:23
 Epoch: 282, lr: 8.0e-05, train_loss: 0.9500, train_acc: 0.7854 test_loss: 0.6394, test_acc: 0.8329, best: 0.8349, time: 0:00:22
 Epoch: 283, lr: 8.0e-05, train_loss: 0.9283, train_acc: 0.7890 test_loss: 0.6383, test_acc: 0.8326, best: 0.8349, time: 0:00:23
 Epoch: 284, lr: 8.0e-05, train_loss: 0.9228, train_acc: 0.7810 test_loss: 0.6291, test_acc: 0.8296, best: 0.8349, time: 0:00:23
 Epoch: 285, lr: 8.0e-05, train_loss: 0.8996, train_acc: 0.7924 test_loss: 0.5897, test_acc: 0.8343, best: 0.8349, time: 0:00:23
 Epoch: 286, lr: 8.0e-05, train_loss: 0.9021, train_acc: 0.7898 test_loss: 0.6516, test_acc: 0.8260, best: 0.8349, time: 0:00:23
 Epoch: 287, lr: 8.0e-05, train_loss: 0.9077, train_acc: 0.7914 test_loss: 0.6121, test_acc: 0.8335, best: 0.8349, time: 0:00:23
 Epoch: 288, lr: 8.0e-05, train_loss: 0.9331, train_acc: 0.7814 test_loss: 0.5957, test_acc: 0.8325, best: 0.8349, time: 0:00:23
 Epoch: 289, lr: 8.0e-05, train_loss: 0.9469, train_acc: 0.7818 test_loss: 0.6256, test_acc: 0.8336, best: 0.8349, time: 0:00:23
 Epoch: 290, lr: 8.0e-05, train_loss: 0.9153, train_acc: 0.7852 test_loss: 0.6070, test_acc: 0.8347, best: 0.8349, time: 0:00:19
 Epoch: 291, lr: 8.0e-05, train_loss: 0.9807, train_acc: 0.7662 test_loss: 0.6552, test_acc: 0.8295, best: 0.8349, time: 0:00:19
 Epoch: 292, lr: 8.0e-05, train_loss: 0.9594, train_acc: 0.7734 test_loss: 0.6000, test_acc: 0.8354, best: 0.8354, time: 0:00:19
 Epoch: 293, lr: 8.0e-05, train_loss: 0.9495, train_acc: 0.7762 test_loss: 0.5663, test_acc: 0.8309, best: 0.8354, time: 0:00:19
 Epoch: 294, lr: 8.0e-05, train_loss: 0.9146, train_acc: 0.7836 test_loss: 0.5789, test_acc: 0.8321, best: 0.8354, time: 0:00:19
 Epoch: 295, lr: 8.0e-05, train_loss: 0.9395, train_acc: 0.7818 test_loss: 0.6644, test_acc: 0.8239, best: 0.8354, time: 0:00:19
 Epoch: 296, lr: 8.0e-05, train_loss: 0.9347, train_acc: 0.7772 test_loss: 0.6541, test_acc: 0.8266, best: 0.8354, time: 0:00:19
 Epoch: 297, lr: 8.0e-05, train_loss: 0.9246, train_acc: 0.7858 test_loss: 0.6013, test_acc: 0.8315, best: 0.8354, time: 0:00:19
 Epoch: 298, lr: 8.0e-05, train_loss: 0.9509, train_acc: 0.7750 test_loss: 0.6649, test_acc: 0.8250, best: 0.8354, time: 0:00:19
 Epoch: 299, lr: 8.0e-05, train_loss: 0.9169, train_acc: 0.7888 test_loss: 0.5605, test_acc: 0.8374, best: 0.8374, time: 0:00:19
 Epoch: 300, lr: 8.0e-05, train_loss: 0.8848, train_acc: 0.8012 test_loss: 0.5901, test_acc: 0.8365, best: 0.8374, time: 0:00:19
 Highest accuracy: 0.8374