
 Run on time: 2024-03-22 23:58:48.576034

 Architecture: resnext18-4-11221

 Arguments:
	 root                 : ./
	 seed                 : 0
	 devices              : 0
	 dataset              : STL10
	 im_size              : 128
	 batch_size           : 8
	 architecture         : resnext18-4-11221
	 teacher              : resnext18-1-21222
	 teacher_pretrained   : ./ckpt/resnext18-1-21222_stl10_imsize128_batchsize8_lr0.001_optimizerAdam.pth
	 dist_config          : ./configs/resnext18-red+kd.yaml
	 dist_pretrained      : 
	 epochs               : 300
	 learning_rate        : 0.01
	 lr_interval          : 0.6 0.8 0.9
	 lr_reduce            : 5
	 optimizer            : SGD
	 log                  : True
	 test_only            : False
	 dont_save            : False
 Missing keys : [], Unexpected Keys: []
 Info: Accuracy of loaded ANN model: 0.85125

 Model: DataParallel(
  (module): ReED(
    (student): Network(
      (net): ResNeXt(
        (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(4, 4), padding=(3, 3), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=1, padding=1, dilation=1, ceil_mode=False)
        (layer1): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (1): BasicBlock(
            (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer2): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer3): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
              (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (layer4): Sequential(
          (0): BasicBlock(
            (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (downsample): Sequential(
              (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
              (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (1): BasicBlock(
            (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (relu): ReLU(inplace=True)
            (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
        (fc): Linear(in_features=512, out_features=10, bias=True)
      )
    )
    (teachers): ModuleList(
      (0): Network(
        (net): ResNeXt(
          (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
          (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
          (layer1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
            (1): BasicBlock(
              (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
              (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (layer2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (downsample): Sequential(
                (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (layer3): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (downsample): Sequential(
                (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (layer4): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (downsample): Sequential(
                (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (relu): ReLU(inplace=True)
              (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
              (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            )
          )
          (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
          (fc): Linear(in_features=512, out_features=10, bias=True)
        )
      )
    )
    (dist_modules): ModuleList(
      (0-1): 2 x ResidualEncodedModule(
        (logit): Sequential(
          (0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): Sigmoid()
        )
        (residual_encoder): Sequential(
          (0): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU6(inplace=True)
        )
      )
      (2-3): 2 x ResidualEncodedModule(
        (logit): Sequential(
          (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): Sigmoid()
        )
        (residual_encoder): Sequential(
          (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU6(inplace=True)
        )
      )
      (4): ResidualEncodedModule(
        (logit): Sequential(
          (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): Sigmoid()
        )
        (residual_encoder): Sequential(
          (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU6(inplace=True)
        )
      )
      (5): KnowledgeDistillationModule()
    )
  )
)

 Optimizer: SGD (
Parameter Group 0
    dampening: 0
    differentiable: False
    foreach: None
    lr: 0.01
    maximize: False
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 1.9537, train_acc: 0.1918 test_loss: 1.7577, test_acc: 0.3301, best: 0.3301, time: 0:00:49
 Epoch: 2, lr: 1.0e-02, train_loss: 1.6397, train_acc: 0.2616 test_loss: 1.7424, test_acc: 0.3444, best: 0.3444, time: 0:00:49
 Epoch: 3, lr: 1.0e-02, train_loss: 1.5441, train_acc: 0.3024 test_loss: 1.5753, test_acc: 0.4128, best: 0.4128, time: 0:00:47
 Epoch: 4, lr: 1.0e-02, train_loss: 1.4673, train_acc: 0.3406 test_loss: 1.6735, test_acc: 0.4106, best: 0.4128, time: 0:00:47
 Epoch: 5, lr: 1.0e-02, train_loss: 1.4193, train_acc: 0.3600 test_loss: 1.4419, test_acc: 0.4646, best: 0.4646, time: 0:00:49
 Epoch: 6, lr: 1.0e-02, train_loss: 1.3713, train_acc: 0.3928 test_loss: 1.2269, test_acc: 0.5534, best: 0.5534, time: 0:00:49
 Epoch: 7, lr: 1.0e-02, train_loss: 1.3366, train_acc: 0.4022 test_loss: 1.2388, test_acc: 0.5544, best: 0.5544, time: 0:00:49
 Epoch: 8, lr: 1.0e-02, train_loss: 1.3066, train_acc: 0.4296 test_loss: 1.2015, test_acc: 0.5669, best: 0.5669, time: 0:00:49
 Epoch: 9, lr: 1.0e-02, train_loss: 1.2652, train_acc: 0.4522 test_loss: 1.2164, test_acc: 0.5663, best: 0.5669, time: 0:00:48
 Epoch: 10, lr: 1.0e-02, train_loss: 1.2440, train_acc: 0.4692 test_loss: 1.2568, test_acc: 0.5489, best: 0.5669, time: 0:00:48
 Epoch: 11, lr: 1.0e-02, train_loss: 1.2179, train_acc: 0.4798 test_loss: 1.0571, test_acc: 0.6326, best: 0.6326, time: 0:00:47
 Epoch: 12, lr: 1.0e-02, train_loss: 1.2049, train_acc: 0.4916 test_loss: 1.0427, test_acc: 0.6286, best: 0.6326, time: 0:00:50
 Epoch: 13, lr: 1.0e-02, train_loss: 1.1870, train_acc: 0.5014 test_loss: 1.1260, test_acc: 0.5968, best: 0.6326, time: 0:00:48
 Epoch: 14, lr: 1.0e-02, train_loss: 1.1652, train_acc: 0.5090 test_loss: 1.0777, test_acc: 0.6229, best: 0.6326, time: 0:00:48
 Epoch: 15, lr: 1.0e-02, train_loss: 1.1602, train_acc: 0.5070 test_loss: 1.0468, test_acc: 0.6274, best: 0.6326, time: 0:00:47
 Epoch: 16, lr: 1.0e-02, train_loss: 1.1515, train_acc: 0.5150 test_loss: 1.0165, test_acc: 0.6291, best: 0.6326, time: 0:00:47
 Epoch: 17, lr: 1.0e-02, train_loss: 1.1141, train_acc: 0.5316 test_loss: 0.9935, test_acc: 0.6474, best: 0.6474, time: 0:00:48
 Epoch: 18, lr: 1.0e-02, train_loss: 1.1117, train_acc: 0.5362 test_loss: 0.9631, test_acc: 0.6639, best: 0.6639, time: 0:00:51
 Epoch: 19, lr: 1.0e-02, train_loss: 1.0900, train_acc: 0.5466 test_loss: 1.0434, test_acc: 0.6344, best: 0.6639, time: 0:00:48
 Epoch: 20, lr: 1.0e-02, train_loss: 1.0836, train_acc: 0.5590 test_loss: 0.8978, test_acc: 0.6907, best: 0.6907, time: 0:00:48
 Epoch: 21, lr: 1.0e-02, train_loss: 1.0728, train_acc: 0.5600 test_loss: 0.9235, test_acc: 0.6736, best: 0.6907, time: 0:00:48
 Epoch: 22, lr: 1.0e-02, train_loss: 1.0558, train_acc: 0.5644 test_loss: 0.9451, test_acc: 0.6579, best: 0.6907, time: 0:00:45
 Epoch: 23, lr: 1.0e-02, train_loss: 1.0513, train_acc: 0.5666 test_loss: 0.9382, test_acc: 0.6829, best: 0.6907, time: 0:00:47
 Epoch: 24, lr: 1.0e-02, train_loss: 1.0343, train_acc: 0.5806 test_loss: 0.9457, test_acc: 0.6677, best: 0.6907, time: 0:00:56
 Epoch: 25, lr: 1.0e-02, train_loss: 1.0359, train_acc: 0.5662 test_loss: 0.9321, test_acc: 0.6841, best: 0.6907, time: 0:00:50
 Epoch: 26, lr: 1.0e-02, train_loss: 1.0201, train_acc: 0.5764 test_loss: 0.8146, test_acc: 0.7127, best: 0.7127, time: 0:00:50
 Epoch: 27, lr: 1.0e-02, train_loss: 1.0113, train_acc: 0.5978 test_loss: 0.9164, test_acc: 0.6830, best: 0.7127, time: 0:00:50
 Epoch: 28, lr: 1.0e-02, train_loss: 1.0047, train_acc: 0.5968 test_loss: 0.8652, test_acc: 0.7057, best: 0.7127, time: 0:00:47
 Epoch: 29, lr: 1.0e-02, train_loss: 0.9918, train_acc: 0.5886 test_loss: 0.8701, test_acc: 0.7035, best: 0.7127, time: 0:00:46
 Epoch: 30, lr: 1.0e-02, train_loss: 0.9897, train_acc: 0.6008 test_loss: 0.8619, test_acc: 0.6964, best: 0.7127, time: 0:00:48
 Epoch: 31, lr: 1.0e-02, train_loss: 0.9917, train_acc: 0.6014 test_loss: 0.8128, test_acc: 0.7252, best: 0.7252, time: 0:00:52
 Epoch: 32, lr: 1.0e-02, train_loss: 0.9725, train_acc: 0.6068 test_loss: 0.8696, test_acc: 0.7027, best: 0.7252, time: 0:00:49
 Epoch: 33, lr: 1.0e-02, train_loss: 0.9761, train_acc: 0.6038 test_loss: 0.7659, test_acc: 0.7322, best: 0.7322, time: 0:00:50
 Epoch: 34, lr: 1.0e-02, train_loss: 0.9663, train_acc: 0.6032 test_loss: 0.9048, test_acc: 0.6819, best: 0.7322, time: 0:00:45
 Epoch: 35, lr: 1.0e-02, train_loss: 0.9713, train_acc: 0.6172 test_loss: 0.8622, test_acc: 0.7073, best: 0.7322, time: 0:00:46
 Epoch: 36, lr: 1.0e-02, train_loss: 0.9637, train_acc: 0.6062 test_loss: 0.7817, test_acc: 0.7328, best: 0.7328, time: 0:00:47
 Epoch: 37, lr: 1.0e-02, train_loss: 0.9466, train_acc: 0.6204 test_loss: 0.8850, test_acc: 0.6914, best: 0.7328, time: 0:00:51
 Epoch: 38, lr: 1.0e-02, train_loss: 0.9360, train_acc: 0.6322 test_loss: 0.8751, test_acc: 0.6987, best: 0.7328, time: 0:00:51
 Epoch: 39, lr: 1.0e-02, train_loss: 0.9446, train_acc: 0.6244 test_loss: 0.7322, test_acc: 0.7454, best: 0.7454, time: 0:00:51
 Epoch: 40, lr: 1.0e-02, train_loss: 0.9202, train_acc: 0.6308 test_loss: 0.7406, test_acc: 0.7464, best: 0.7464, time: 0:00:46
 Epoch: 41, lr: 1.0e-02, train_loss: 0.9329, train_acc: 0.6304 test_loss: 0.8001, test_acc: 0.7296, best: 0.7464, time: 0:00:46
 Epoch: 42, lr: 1.0e-02, train_loss: 0.9144, train_acc: 0.6394 test_loss: 0.7121, test_acc: 0.7541, best: 0.7541, time: 0:00:47
 Epoch: 43, lr: 1.0e-02, train_loss: 0.9223, train_acc: 0.6326 test_loss: 0.7946, test_acc: 0.7372, best: 0.7541, time: 0:00:50
 Epoch: 44, lr: 1.0e-02, train_loss: 0.9120, train_acc: 0.6412 test_loss: 0.8543, test_acc: 0.7107, best: 0.7541, time: 0:00:51
 Epoch: 45, lr: 1.0e-02, train_loss: 0.9020, train_acc: 0.6486 test_loss: 0.7612, test_acc: 0.7442, best: 0.7541, time: 0:00:50
 Epoch: 46, lr: 1.0e-02, train_loss: 0.8901, train_acc: 0.6590 test_loss: 0.8513, test_acc: 0.7105, best: 0.7541, time: 0:00:47
 Epoch: 47, lr: 1.0e-02, train_loss: 0.8909, train_acc: 0.6470 test_loss: 0.7489, test_acc: 0.7471, best: 0.7541, time: 0:00:45
 Epoch: 48, lr: 1.0e-02, train_loss: 0.8905, train_acc: 0.6480 test_loss: 0.7056, test_acc: 0.7630, best: 0.7630, time: 0:00:47
 Epoch: 49, lr: 1.0e-02, train_loss: 0.9034, train_acc: 0.6442 test_loss: 0.8281, test_acc: 0.7195, best: 0.7630, time: 0:00:52
 Epoch: 50, lr: 1.0e-02, train_loss: 0.8938, train_acc: 0.6564 test_loss: 0.7318, test_acc: 0.7580, best: 0.7630, time: 0:00:52
 Epoch: 51, lr: 1.0e-02, train_loss: 0.8814, train_acc: 0.6646 test_loss: 0.7120, test_acc: 0.7576, best: 0.7630, time: 0:00:49
 Epoch: 52, lr: 1.0e-02, train_loss: 0.8612, train_acc: 0.6686 test_loss: 0.6928, test_acc: 0.7649, best: 0.7649, time: 0:00:50
 Epoch: 53, lr: 1.0e-02, train_loss: 0.8641, train_acc: 0.6638 test_loss: 0.8018, test_acc: 0.7316, best: 0.7649, time: 0:00:45
 Epoch: 54, lr: 1.0e-02, train_loss: 0.8622, train_acc: 0.6648 test_loss: 0.7316, test_acc: 0.7570, best: 0.7649, time: 0:00:46
 Epoch: 55, lr: 1.0e-02, train_loss: 0.8682, train_acc: 0.6630 test_loss: 0.6800, test_acc: 0.7688, best: 0.7688, time: 0:00:50
 Epoch: 56, lr: 1.0e-02, train_loss: 0.8630, train_acc: 0.6684 test_loss: 0.7246, test_acc: 0.7548, best: 0.7688, time: 0:00:52
 Epoch: 57, lr: 1.0e-02, train_loss: 0.8563, train_acc: 0.6652 test_loss: 0.7521, test_acc: 0.7410, best: 0.7688, time: 0:00:51
 Epoch: 58, lr: 1.0e-02, train_loss: 0.8524, train_acc: 0.6746 test_loss: 0.7184, test_acc: 0.7628, best: 0.7688, time: 0:00:50
 Epoch: 59, lr: 1.0e-02, train_loss: 0.8339, train_acc: 0.6850 test_loss: 0.7427, test_acc: 0.7556, best: 0.7688, time: 0:00:46
 Epoch: 60, lr: 1.0e-02, train_loss: 0.8493, train_acc: 0.6764 test_loss: 0.6677, test_acc: 0.7740, best: 0.7740, time: 0:00:46
 Epoch: 61, lr: 1.0e-02, train_loss: 0.8328, train_acc: 0.6780 test_loss: 0.7478, test_acc: 0.7481, best: 0.7740, time: 0:00:48
 Epoch: 62, lr: 1.0e-02, train_loss: 0.8328, train_acc: 0.6844 test_loss: 0.7229, test_acc: 0.7601, best: 0.7740, time: 0:00:52
 Epoch: 63, lr: 1.0e-02, train_loss: 0.8541, train_acc: 0.6840 test_loss: 0.6871, test_acc: 0.7709, best: 0.7740, time: 0:00:53
 Epoch: 64, lr: 1.0e-02, train_loss: 0.8159, train_acc: 0.6928 test_loss: 0.7096, test_acc: 0.7700, best: 0.7740, time: 0:00:50
 Epoch: 65, lr: 1.0e-02, train_loss: 0.8279, train_acc: 0.6906 test_loss: 0.7410, test_acc: 0.7516, best: 0.7740, time: 0:00:50
 Epoch: 66, lr: 1.0e-02, train_loss: 0.8260, train_acc: 0.6822 test_loss: 0.6555, test_acc: 0.7835, best: 0.7835, time: 0:00:46
 Epoch: 67, lr: 1.0e-02, train_loss: 0.8326, train_acc: 0.6838 test_loss: 0.6937, test_acc: 0.7650, best: 0.7835, time: 0:00:46
 Epoch: 68, lr: 1.0e-02, train_loss: 0.8245, train_acc: 0.6976 test_loss: 0.7063, test_acc: 0.7736, best: 0.7835, time: 0:00:48
 Epoch: 69, lr: 1.0e-02, train_loss: 0.7977, train_acc: 0.7044 test_loss: 0.6999, test_acc: 0.7789, best: 0.7835, time: 0:00:53
 Epoch: 70, lr: 1.0e-02, train_loss: 0.7894, train_acc: 0.7038 test_loss: 0.6530, test_acc: 0.7811, best: 0.7835, time: 0:00:50
 Epoch: 71, lr: 1.0e-02, train_loss: 0.7873, train_acc: 0.7130 test_loss: 0.7883, test_acc: 0.7535, best: 0.7835, time: 0:00:51
 Epoch: 72, lr: 1.0e-02, train_loss: 0.7962, train_acc: 0.7046 test_loss: 0.6599, test_acc: 0.7811, best: 0.7835, time: 0:00:45
 Epoch: 73, lr: 1.0e-02, train_loss: 0.7843, train_acc: 0.7128 test_loss: 0.6504, test_acc: 0.7880, best: 0.7880, time: 0:00:47
 Epoch: 74, lr: 1.0e-02, train_loss: 0.7719, train_acc: 0.7148 test_loss: 0.6656, test_acc: 0.7864, best: 0.7880, time: 0:00:48
 Epoch: 75, lr: 1.0e-02, train_loss: 0.8047, train_acc: 0.7006 test_loss: 0.7266, test_acc: 0.7639, best: 0.7880, time: 0:00:52
 Epoch: 76, lr: 1.0e-02, train_loss: 0.7905, train_acc: 0.6992 test_loss: 0.6696, test_acc: 0.7811, best: 0.7880, time: 0:00:51
 Epoch: 77, lr: 1.0e-02, train_loss: 0.7825, train_acc: 0.7106 test_loss: 0.6402, test_acc: 0.7866, best: 0.7880, time: 0:00:50
 Epoch: 78, lr: 1.0e-02, train_loss: 0.7646, train_acc: 0.7184 test_loss: 0.6425, test_acc: 0.7881, best: 0.7881, time: 0:00:47
 Epoch: 79, lr: 1.0e-02, train_loss: 0.7872, train_acc: 0.7144 test_loss: 0.6428, test_acc: 0.7916, best: 0.7916, time: 0:00:47
 Epoch: 80, lr: 1.0e-02, train_loss: 0.7787, train_acc: 0.7122 test_loss: 0.7145, test_acc: 0.7640, best: 0.7916, time: 0:00:46
 Epoch: 81, lr: 1.0e-02, train_loss: 0.7730, train_acc: 0.7216 test_loss: 0.7029, test_acc: 0.7718, best: 0.7916, time: 0:00:51
 Epoch: 82, lr: 1.0e-02, train_loss: 0.7947, train_acc: 0.7056 test_loss: 0.6315, test_acc: 0.7917, best: 0.7917, time: 0:00:53
 Epoch: 83, lr: 1.0e-02, train_loss: 0.7672, train_acc: 0.7138 test_loss: 0.6241, test_acc: 0.7979, best: 0.7979, time: 0:00:52
 Epoch: 84, lr: 1.0e-02, train_loss: 0.7644, train_acc: 0.7218 test_loss: 0.6091, test_acc: 0.7960, best: 0.7979, time: 0:00:49
 Epoch: 85, lr: 1.0e-02, train_loss: 0.7554, train_acc: 0.7300 test_loss: 0.6921, test_acc: 0.7745, best: 0.7979, time: 0:00:45
 Epoch: 86, lr: 1.0e-02, train_loss: 0.7608, train_acc: 0.7224 test_loss: 0.6088, test_acc: 0.7987, best: 0.7987, time: 0:00:46
 Epoch: 87, lr: 1.0e-02, train_loss: 0.7572, train_acc: 0.7264 test_loss: 0.6587, test_acc: 0.7839, best: 0.7987, time: 0:00:50
 Epoch: 88, lr: 1.0e-02, train_loss: 0.7753, train_acc: 0.7220 test_loss: 0.6881, test_acc: 0.7738, best: 0.7987, time: 0:00:52
 Epoch: 89, lr: 1.0e-02, train_loss: 0.7426, train_acc: 0.7464 test_loss: 0.6992, test_acc: 0.7766, best: 0.7987, time: 0:00:54
 Epoch: 90, lr: 1.0e-02, train_loss: 0.7516, train_acc: 0.7300 test_loss: 0.6428, test_acc: 0.7945, best: 0.7987, time: 0:00:54
 Epoch: 91, lr: 1.0e-02, train_loss: 0.7543, train_acc: 0.7318 test_loss: 0.6387, test_acc: 0.7934, best: 0.7987, time: 0:00:47
 Epoch: 92, lr: 1.0e-02, train_loss: 0.7322, train_acc: 0.7418 test_loss: 0.6130, test_acc: 0.7981, best: 0.7987, time: 0:00:44
 Epoch: 93, lr: 1.0e-02, train_loss: 0.7467, train_acc: 0.7272 test_loss: 0.6412, test_acc: 0.7959, best: 0.7987, time: 0:00:47
 Epoch: 94, lr: 1.0e-02, train_loss: 0.7476, train_acc: 0.7316 test_loss: 0.6382, test_acc: 0.8020, best: 0.8020, time: 0:00:50
 Epoch: 95, lr: 1.0e-02, train_loss: 0.7493, train_acc: 0.7440 test_loss: 0.6206, test_acc: 0.7976, best: 0.8020, time: 0:00:54
 Epoch: 96, lr: 1.0e-02, train_loss: 0.7225, train_acc: 0.7436 test_loss: 0.6228, test_acc: 0.7999, best: 0.8020, time: 0:00:52
 Epoch: 97, lr: 1.0e-02, train_loss: 0.7325, train_acc: 0.7458 test_loss: 0.6393, test_acc: 0.7930, best: 0.8020, time: 0:00:49
 Epoch: 98, lr: 1.0e-02, train_loss: 0.7411, train_acc: 0.7418 test_loss: 0.6445, test_acc: 0.7853, best: 0.8020, time: 0:00:45
 Epoch: 99, lr: 1.0e-02, train_loss: 0.7277, train_acc: 0.7454 test_loss: 0.6629, test_acc: 0.7829, best: 0.8020, time: 0:00:46
 Epoch: 100, lr: 1.0e-02, train_loss: 0.7261, train_acc: 0.7430 test_loss: 0.6140, test_acc: 0.8050, best: 0.8050, time: 0:00:50
 Epoch: 101, lr: 1.0e-02, train_loss: 0.7409, train_acc: 0.7378 test_loss: 0.6247, test_acc: 0.8034, best: 0.8050, time: 0:00:52
 Epoch: 102, lr: 1.0e-02, train_loss: 0.7238, train_acc: 0.7496 test_loss: 0.6657, test_acc: 0.7859, best: 0.8050, time: 0:00:53
 Epoch: 103, lr: 1.0e-02, train_loss: 0.7247, train_acc: 0.7472 test_loss: 0.6711, test_acc: 0.7824, best: 0.8050, time: 0:00:50
 Epoch: 104, lr: 1.0e-02, train_loss: 0.7328, train_acc: 0.7550 test_loss: 0.6437, test_acc: 0.7961, best: 0.8050, time: 0:00:47
 Epoch: 105, lr: 1.0e-02, train_loss: 0.7340, train_acc: 0.7448 test_loss: 0.6340, test_acc: 0.8016, best: 0.8050, time: 0:00:46
 Epoch: 106, lr: 1.0e-02, train_loss: 0.7259, train_acc: 0.7446 test_loss: 0.6316, test_acc: 0.8026, best: 0.8050, time: 0:00:48
 Epoch: 107, lr: 1.0e-02, train_loss: 0.7222, train_acc: 0.7462 test_loss: 0.6149, test_acc: 0.8024, best: 0.8050, time: 0:00:50
 Epoch: 108, lr: 1.0e-02, train_loss: 0.7054, train_acc: 0.7540 test_loss: 0.6289, test_acc: 0.7993, best: 0.8050, time: 0:00:53
 Epoch: 109, lr: 1.0e-02, train_loss: 0.7418, train_acc: 0.7382 test_loss: 0.6347, test_acc: 0.7959, best: 0.8050, time: 0:00:50
 Epoch: 110, lr: 1.0e-02, train_loss: 0.7124, train_acc: 0.7528 test_loss: 0.6034, test_acc: 0.8095, best: 0.8095, time: 0:00:48
 Epoch: 111, lr: 1.0e-02, train_loss: 0.7154, train_acc: 0.7538 test_loss: 0.6267, test_acc: 0.7974, best: 0.8095, time: 0:00:46
 Epoch: 112, lr: 1.0e-02, train_loss: 0.7262, train_acc: 0.7464 test_loss: 0.6772, test_acc: 0.7839, best: 0.8095, time: 0:00:46
 Epoch: 113, lr: 1.0e-02, train_loss: 0.7099, train_acc: 0.7488 test_loss: 0.6256, test_acc: 0.8041, best: 0.8095, time: 0:00:50
 Epoch: 114, lr: 1.0e-02, train_loss: 0.6971, train_acc: 0.7694 test_loss: 0.6412, test_acc: 0.7960, best: 0.8095, time: 0:00:52
 Epoch: 115, lr: 1.0e-02, train_loss: 0.6888, train_acc: 0.7610 test_loss: 0.6530, test_acc: 0.8031, best: 0.8095, time: 0:00:51
 Epoch: 116, lr: 1.0e-02, train_loss: 0.7095, train_acc: 0.7566 test_loss: 0.6141, test_acc: 0.8020, best: 0.8095, time: 0:00:49
 Epoch: 117, lr: 1.0e-02, train_loss: 0.7214, train_acc: 0.7362 test_loss: 0.6173, test_acc: 0.7984, best: 0.8095, time: 0:00:44
 Epoch: 118, lr: 1.0e-02, train_loss: 0.7236, train_acc: 0.7434 test_loss: 0.5878, test_acc: 0.8099, best: 0.8099, time: 0:00:46
 Epoch: 119, lr: 1.0e-02, train_loss: 0.6905, train_acc: 0.7588 test_loss: 0.6004, test_acc: 0.8045, best: 0.8099, time: 0:00:50
 Epoch: 120, lr: 1.0e-02, train_loss: 0.7110, train_acc: 0.7616 test_loss: 0.6316, test_acc: 0.8094, best: 0.8099, time: 0:00:53
 Epoch: 121, lr: 1.0e-02, train_loss: 0.7050, train_acc: 0.7618 test_loss: 0.6393, test_acc: 0.7927, best: 0.8099, time: 0:00:53
 Epoch: 122, lr: 1.0e-02, train_loss: 0.7029, train_acc: 0.7570 test_loss: 0.6063, test_acc: 0.8050, best: 0.8099, time: 0:00:52
 Epoch: 123, lr: 1.0e-02, train_loss: 0.6877, train_acc: 0.7660 test_loss: 0.6448, test_acc: 0.7905, best: 0.8099, time: 0:00:49
 Epoch: 124, lr: 1.0e-02, train_loss: 0.6905, train_acc: 0.7620 test_loss: 0.6137, test_acc: 0.8013, best: 0.8099, time: 0:00:28
 Epoch: 125, lr: 1.0e-02, train_loss: 0.7069, train_acc: 0.7606 test_loss: 0.6107, test_acc: 0.8097, best: 0.8099, time: 0:00:20
 Epoch: 126, lr: 1.0e-02, train_loss: 0.7012, train_acc: 0.7622 test_loss: 0.6441, test_acc: 0.8041, best: 0.8099, time: 0:00:20
 Epoch: 127, lr: 1.0e-02, train_loss: 0.6993, train_acc: 0.7612 test_loss: 0.6427, test_acc: 0.7959, best: 0.8099, time: 0:00:20
 Epoch: 128, lr: 1.0e-02, train_loss: 0.6951, train_acc: 0.7640 test_loss: 0.6009, test_acc: 0.8030, best: 0.8099, time: 0:00:20
 Epoch: 129, lr: 1.0e-02, train_loss: 0.6985, train_acc: 0.7628 test_loss: 0.6213, test_acc: 0.8123, best: 0.8123, time: 0:00:20
 Epoch: 130, lr: 1.0e-02, train_loss: 0.6771, train_acc: 0.7714 test_loss: 0.6188, test_acc: 0.8100, best: 0.8123, time: 0:00:20
 Epoch: 131, lr: 1.0e-02, train_loss: 0.6797, train_acc: 0.7732 test_loss: 0.6071, test_acc: 0.8170, best: 0.8170, time: 0:00:18
 Epoch: 132, lr: 1.0e-02, train_loss: 0.6626, train_acc: 0.7828 test_loss: 0.6457, test_acc: 0.7949, best: 0.8170, time: 0:00:18
 Epoch: 133, lr: 1.0e-02, train_loss: 0.6916, train_acc: 0.7660 test_loss: 0.6214, test_acc: 0.8009, best: 0.8170, time: 0:00:18
 Epoch: 134, lr: 1.0e-02, train_loss: 0.6963, train_acc: 0.7606 test_loss: 0.5720, test_acc: 0.8226, best: 0.8226, time: 0:00:18
 Epoch: 135, lr: 1.0e-02, train_loss: 0.6813, train_acc: 0.7752 test_loss: 0.6337, test_acc: 0.8007, best: 0.8226, time: 0:00:18
 Epoch: 136, lr: 1.0e-02, train_loss: 0.6776, train_acc: 0.7718 test_loss: 0.6617, test_acc: 0.8024, best: 0.8226, time: 0:00:18
 Epoch: 137, lr: 1.0e-02, train_loss: 0.6617, train_acc: 0.7722 test_loss: 0.6336, test_acc: 0.8064, best: 0.8226, time: 0:00:18
 Epoch: 138, lr: 1.0e-02, train_loss: 0.6612, train_acc: 0.7766 test_loss: 0.5889, test_acc: 0.8154, best: 0.8226, time: 0:00:18
 Epoch: 139, lr: 1.0e-02, train_loss: 0.6823, train_acc: 0.7768 test_loss: 0.6098, test_acc: 0.8053, best: 0.8226, time: 0:00:18
 Epoch: 140, lr: 1.0e-02, train_loss: 0.6803, train_acc: 0.7684 test_loss: 0.5847, test_acc: 0.8131, best: 0.8226, time: 0:00:18
 Epoch: 141, lr: 1.0e-02, train_loss: 0.6738, train_acc: 0.7670 test_loss: 0.6208, test_acc: 0.8051, best: 0.8226, time: 0:00:18
 Epoch: 142, lr: 1.0e-02, train_loss: 0.6711, train_acc: 0.7826 test_loss: 0.6098, test_acc: 0.8175, best: 0.8226, time: 0:00:18
 Epoch: 143, lr: 1.0e-02, train_loss: 0.6686, train_acc: 0.7902 test_loss: 0.6109, test_acc: 0.8133, best: 0.8226, time: 0:00:18
 Epoch: 144, lr: 1.0e-02, train_loss: 0.6925, train_acc: 0.7722 test_loss: 0.6111, test_acc: 0.8104, best: 0.8226, time: 0:00:18
 Epoch: 145, lr: 1.0e-02, train_loss: 0.6736, train_acc: 0.7718 test_loss: 0.5980, test_acc: 0.8120, best: 0.8226, time: 0:00:18
 Epoch: 146, lr: 1.0e-02, train_loss: 0.6660, train_acc: 0.7678 test_loss: 0.6435, test_acc: 0.8050, best: 0.8226, time: 0:00:18
 Epoch: 147, lr: 1.0e-02, train_loss: 0.6489, train_acc: 0.7834 test_loss: 0.6183, test_acc: 0.8081, best: 0.8226, time: 0:00:18
 Epoch: 148, lr: 1.0e-02, train_loss: 0.6776, train_acc: 0.7734 test_loss: 0.6066, test_acc: 0.8077, best: 0.8226, time: 0:00:18
 Epoch: 149, lr: 1.0e-02, train_loss: 0.6577, train_acc: 0.7794 test_loss: 0.6165, test_acc: 0.8025, best: 0.8226, time: 0:00:18
 Epoch: 150, lr: 1.0e-02, train_loss: 0.6755, train_acc: 0.7680 test_loss: 0.5704, test_acc: 0.8194, best: 0.8226, time: 0:00:18
 Epoch: 151, lr: 1.0e-02, train_loss: 0.6732, train_acc: 0.7808 test_loss: 0.6348, test_acc: 0.8120, best: 0.8226, time: 0:00:18
 Epoch: 152, lr: 1.0e-02, train_loss: 0.6504, train_acc: 0.7918 test_loss: 0.6088, test_acc: 0.8130, best: 0.8226, time: 0:00:18
 Epoch: 153, lr: 1.0e-02, train_loss: 0.6611, train_acc: 0.7856 test_loss: 0.6794, test_acc: 0.7909, best: 0.8226, time: 0:00:18
 Epoch: 154, lr: 1.0e-02, train_loss: 0.6664, train_acc: 0.7824 test_loss: 0.5920, test_acc: 0.8153, best: 0.8226, time: 0:00:18
 Epoch: 155, lr: 1.0e-02, train_loss: 0.6587, train_acc: 0.7848 test_loss: 0.6192, test_acc: 0.8054, best: 0.8226, time: 0:00:18
 Epoch: 156, lr: 1.0e-02, train_loss: 0.6589, train_acc: 0.7754 test_loss: 0.5690, test_acc: 0.8263, best: 0.8263, time: 0:00:18
 Epoch: 157, lr: 1.0e-02, train_loss: 0.6401, train_acc: 0.7990 test_loss: 0.6487, test_acc: 0.8057, best: 0.8263, time: 0:00:17
 Epoch: 158, lr: 1.0e-02, train_loss: 0.6585, train_acc: 0.7822 test_loss: 0.5984, test_acc: 0.8116, best: 0.8263, time: 0:00:18
 Epoch: 159, lr: 1.0e-02, train_loss: 0.6544, train_acc: 0.7936 test_loss: 0.6221, test_acc: 0.8134, best: 0.8263, time: 0:00:18
 Epoch: 160, lr: 1.0e-02, train_loss: 0.6555, train_acc: 0.7876 test_loss: 0.6378, test_acc: 0.8150, best: 0.8263, time: 0:00:18
 Epoch: 161, lr: 1.0e-02, train_loss: 0.6529, train_acc: 0.7864 test_loss: 0.5557, test_acc: 0.8220, best: 0.8263, time: 0:00:18
 Epoch: 162, lr: 1.0e-02, train_loss: 0.6484, train_acc: 0.7994 test_loss: 0.5798, test_acc: 0.8225, best: 0.8263, time: 0:00:18
 Epoch: 163, lr: 1.0e-02, train_loss: 0.6507, train_acc: 0.7884 test_loss: 0.5871, test_acc: 0.8165, best: 0.8263, time: 0:00:18
 Epoch: 164, lr: 1.0e-02, train_loss: 0.6387, train_acc: 0.7960 test_loss: 0.6114, test_acc: 0.8150, best: 0.8263, time: 0:00:18
 Epoch: 165, lr: 1.0e-02, train_loss: 0.6624, train_acc: 0.7802 test_loss: 0.6093, test_acc: 0.8166, best: 0.8263, time: 0:00:18
 Epoch: 166, lr: 1.0e-02, train_loss: 0.6496, train_acc: 0.7900 test_loss: 0.5987, test_acc: 0.8149, best: 0.8263, time: 0:00:18
 Epoch: 167, lr: 1.0e-02, train_loss: 0.6594, train_acc: 0.7800 test_loss: 0.6020, test_acc: 0.8150, best: 0.8263, time: 0:00:18
 Epoch: 168, lr: 1.0e-02, train_loss: 0.6258, train_acc: 0.8090 test_loss: 0.6119, test_acc: 0.8081, best: 0.8263, time: 0:00:18
 Epoch: 169, lr: 1.0e-02, train_loss: 0.6403, train_acc: 0.7972 test_loss: 0.5812, test_acc: 0.8171, best: 0.8263, time: 0:00:18
 Epoch: 170, lr: 1.0e-02, train_loss: 0.6363, train_acc: 0.8012 test_loss: 0.6291, test_acc: 0.8089, best: 0.8263, time: 0:00:18
 Epoch: 171, lr: 1.0e-02, train_loss: 0.6535, train_acc: 0.7924 test_loss: 0.5878, test_acc: 0.8195, best: 0.8263, time: 0:00:18
 Epoch: 172, lr: 1.0e-02, train_loss: 0.6453, train_acc: 0.8012 test_loss: 0.6126, test_acc: 0.8104, best: 0.8263, time: 0:00:18
 Epoch: 173, lr: 1.0e-02, train_loss: 0.6188, train_acc: 0.8058 test_loss: 0.5729, test_acc: 0.8271, best: 0.8271, time: 0:00:18
 Epoch: 174, lr: 1.0e-02, train_loss: 0.6163, train_acc: 0.8126 test_loss: 0.6204, test_acc: 0.8140, best: 0.8271, time: 0:00:18
 Epoch: 175, lr: 1.0e-02, train_loss: 0.6625, train_acc: 0.7808 test_loss: 0.6296, test_acc: 0.8046, best: 0.8271, time: 0:00:18
 Epoch: 176, lr: 1.0e-02, train_loss: 0.6318, train_acc: 0.8020 test_loss: 0.5966, test_acc: 0.8161, best: 0.8271, time: 0:00:17
 Epoch: 177, lr: 1.0e-02, train_loss: 0.6379, train_acc: 0.7944 test_loss: 0.5941, test_acc: 0.8147, best: 0.8271, time: 0:00:18
 Epoch: 178, lr: 1.0e-02, train_loss: 0.6293, train_acc: 0.7980 test_loss: 0.5722, test_acc: 0.8134, best: 0.8271, time: 0:00:18
 Epoch: 179, lr: 1.0e-02, train_loss: 0.6435, train_acc: 0.7932 test_loss: 0.5795, test_acc: 0.8213, best: 0.8271, time: 0:00:18
 Epoch: 180, lr: 2.0e-03, train_loss: 0.5998, train_acc: 0.8186 test_loss: 0.5259, test_acc: 0.8345, best: 0.8345, time: 0:00:18
 Epoch: 181, lr: 2.0e-03, train_loss: 0.6088, train_acc: 0.8082 test_loss: 0.5565, test_acc: 0.8340, best: 0.8345, time: 0:00:18
 Epoch: 182, lr: 2.0e-03, train_loss: 0.5984, train_acc: 0.8138 test_loss: 0.5591, test_acc: 0.8336, best: 0.8345, time: 0:00:18
 Epoch: 183, lr: 2.0e-03, train_loss: 0.5907, train_acc: 0.8246 test_loss: 0.5452, test_acc: 0.8397, best: 0.8397, time: 0:00:18
 Epoch: 184, lr: 2.0e-03, train_loss: 0.5893, train_acc: 0.8188 test_loss: 0.5488, test_acc: 0.8323, best: 0.8397, time: 0:00:17
 Epoch: 185, lr: 2.0e-03, train_loss: 0.5730, train_acc: 0.8390 test_loss: 0.5603, test_acc: 0.8296, best: 0.8397, time: 0:00:17
 Epoch: 186, lr: 2.0e-03, train_loss: 0.6017, train_acc: 0.8150 test_loss: 0.5371, test_acc: 0.8334, best: 0.8397, time: 0:00:18
 Epoch: 187, lr: 2.0e-03, train_loss: 0.5998, train_acc: 0.8166 test_loss: 0.5472, test_acc: 0.8411, best: 0.8411, time: 0:00:18
 Epoch: 188, lr: 2.0e-03, train_loss: 0.5887, train_acc: 0.8282 test_loss: 0.6125, test_acc: 0.8374, best: 0.8411, time: 0:00:17
 Epoch: 189, lr: 2.0e-03, train_loss: 0.5989, train_acc: 0.8178 test_loss: 0.5489, test_acc: 0.8380, best: 0.8411, time: 0:00:18
 Epoch: 190, lr: 2.0e-03, train_loss: 0.5849, train_acc: 0.8272 test_loss: 0.5308, test_acc: 0.8374, best: 0.8411, time: 0:00:17
 Epoch: 191, lr: 2.0e-03, train_loss: 0.6009, train_acc: 0.8102 test_loss: 0.5414, test_acc: 0.8366, best: 0.8411, time: 0:00:17
 Epoch: 192, lr: 2.0e-03, train_loss: 0.5838, train_acc: 0.8236 test_loss: 0.5829, test_acc: 0.8321, best: 0.8411, time: 0:00:18
 Epoch: 193, lr: 2.0e-03, train_loss: 0.5952, train_acc: 0.8136 test_loss: 0.5496, test_acc: 0.8391, best: 0.8411, time: 0:00:17
 Epoch: 194, lr: 2.0e-03, train_loss: 0.5795, train_acc: 0.8318 test_loss: 0.5584, test_acc: 0.8343, best: 0.8411, time: 0:00:17
 Epoch: 195, lr: 2.0e-03, train_loss: 0.5806, train_acc: 0.8306 test_loss: 0.5585, test_acc: 0.8377, best: 0.8411, time: 0:00:18
 Epoch: 196, lr: 2.0e-03, train_loss: 0.5862, train_acc: 0.8304 test_loss: 0.5662, test_acc: 0.8351, best: 0.8411, time: 0:00:18
 Epoch: 197, lr: 2.0e-03, train_loss: 0.5923, train_acc: 0.8212 test_loss: 0.5392, test_acc: 0.8336, best: 0.8411, time: 0:00:17
 Epoch: 198, lr: 2.0e-03, train_loss: 0.5906, train_acc: 0.8306 test_loss: 0.5566, test_acc: 0.8345, best: 0.8411, time: 0:00:17
 Epoch: 199, lr: 2.0e-03, train_loss: 0.5746, train_acc: 0.8298 test_loss: 0.5354, test_acc: 0.8335, best: 0.8411, time: 0:00:18
 Epoch: 200, lr: 2.0e-03, train_loss: 0.5744, train_acc: 0.8260 test_loss: 0.5361, test_acc: 0.8361, best: 0.8411, time: 0:00:18
 Epoch: 201, lr: 2.0e-03, train_loss: 0.5803, train_acc: 0.8284 test_loss: 0.5383, test_acc: 0.8361, best: 0.8411, time: 0:00:18
 Epoch: 202, lr: 2.0e-03, train_loss: 0.5898, train_acc: 0.8220 test_loss: 0.5374, test_acc: 0.8351, best: 0.8411, time: 0:00:18
 Epoch: 203, lr: 2.0e-03, train_loss: 0.5696, train_acc: 0.8256 test_loss: 0.5398, test_acc: 0.8353, best: 0.8411, time: 0:00:18
 Epoch: 204, lr: 2.0e-03, train_loss: 0.5787, train_acc: 0.8226 test_loss: 0.5171, test_acc: 0.8374, best: 0.8411, time: 0:00:18
 Epoch: 205, lr: 2.0e-03, train_loss: 0.5840, train_acc: 0.8190 test_loss: 0.5514, test_acc: 0.8387, best: 0.8411, time: 0:00:18
 Epoch: 206, lr: 2.0e-03, train_loss: 0.5839, train_acc: 0.8310 test_loss: 0.5227, test_acc: 0.8387, best: 0.8411, time: 0:00:18
 Epoch: 207, lr: 2.0e-03, train_loss: 0.5872, train_acc: 0.8234 test_loss: 0.5713, test_acc: 0.8369, best: 0.8411, time: 0:00:18
 Epoch: 208, lr: 2.0e-03, train_loss: 0.5773, train_acc: 0.8146 test_loss: 0.5628, test_acc: 0.8363, best: 0.8411, time: 0:00:18
 Epoch: 209, lr: 2.0e-03, train_loss: 0.5910, train_acc: 0.8214 test_loss: 0.5634, test_acc: 0.8350, best: 0.8411, time: 0:00:18
 Epoch: 210, lr: 2.0e-03, train_loss: 0.5736, train_acc: 0.8318 test_loss: 0.5349, test_acc: 0.8365, best: 0.8411, time: 0:00:18
 Epoch: 211, lr: 2.0e-03, train_loss: 0.5715, train_acc: 0.8330 test_loss: 0.5313, test_acc: 0.8403, best: 0.8411, time: 0:00:18
 Epoch: 212, lr: 2.0e-03, train_loss: 0.5851, train_acc: 0.8294 test_loss: 0.5685, test_acc: 0.8331, best: 0.8411, time: 0:00:18
 Epoch: 213, lr: 2.0e-03, train_loss: 0.5617, train_acc: 0.8442 test_loss: 0.5421, test_acc: 0.8331, best: 0.8411, time: 0:00:18
 Epoch: 214, lr: 2.0e-03, train_loss: 0.5726, train_acc: 0.8316 test_loss: 0.5512, test_acc: 0.8327, best: 0.8411, time: 0:00:18
 Epoch: 215, lr: 2.0e-03, train_loss: 0.5724, train_acc: 0.8258 test_loss: 0.5389, test_acc: 0.8383, best: 0.8411, time: 0:00:18
 Epoch: 216, lr: 2.0e-03, train_loss: 0.5792, train_acc: 0.8258 test_loss: 0.5361, test_acc: 0.8394, best: 0.8411, time: 0:00:18
 Epoch: 217, lr: 2.0e-03, train_loss: 0.5645, train_acc: 0.8344 test_loss: 0.5399, test_acc: 0.8386, best: 0.8411, time: 0:00:18
 Epoch: 218, lr: 2.0e-03, train_loss: 0.5743, train_acc: 0.8384 test_loss: 0.5407, test_acc: 0.8350, best: 0.8411, time: 0:00:18
 Epoch: 219, lr: 2.0e-03, train_loss: 0.5816, train_acc: 0.8308 test_loss: 0.6087, test_acc: 0.8293, best: 0.8411, time: 0:00:18
 Epoch: 220, lr: 2.0e-03, train_loss: 0.5726, train_acc: 0.8360 test_loss: 0.5605, test_acc: 0.8315, best: 0.8411, time: 0:00:18
 Epoch: 221, lr: 2.0e-03, train_loss: 0.5859, train_acc: 0.8242 test_loss: 0.5348, test_acc: 0.8357, best: 0.8411, time: 0:00:18
 Epoch: 222, lr: 2.0e-03, train_loss: 0.5602, train_acc: 0.8404 test_loss: 0.5632, test_acc: 0.8329, best: 0.8411, time: 0:00:18
 Epoch: 223, lr: 2.0e-03, train_loss: 0.5788, train_acc: 0.8238 test_loss: 0.5456, test_acc: 0.8359, best: 0.8411, time: 0:00:18
 Epoch: 224, lr: 2.0e-03, train_loss: 0.5581, train_acc: 0.8336 test_loss: 0.5489, test_acc: 0.8359, best: 0.8411, time: 0:00:18
 Epoch: 225, lr: 2.0e-03, train_loss: 0.5766, train_acc: 0.8324 test_loss: 0.5661, test_acc: 0.8330, best: 0.8411, time: 0:00:18
 Epoch: 226, lr: 2.0e-03, train_loss: 0.5736, train_acc: 0.8258 test_loss: 0.5394, test_acc: 0.8346, best: 0.8411, time: 0:00:18
 Epoch: 227, lr: 2.0e-03, train_loss: 0.5740, train_acc: 0.8388 test_loss: 0.5631, test_acc: 0.8320, best: 0.8411, time: 0:00:18
 Epoch: 228, lr: 2.0e-03, train_loss: 0.5779, train_acc: 0.8290 test_loss: 0.5604, test_acc: 0.8357, best: 0.8411, time: 0:00:18
 Epoch: 229, lr: 2.0e-03, train_loss: 0.5487, train_acc: 0.8378 test_loss: 0.5445, test_acc: 0.8326, best: 0.8411, time: 0:00:18
 Epoch: 230, lr: 2.0e-03, train_loss: 0.5826, train_acc: 0.8214 test_loss: 0.5550, test_acc: 0.8356, best: 0.8411, time: 0:00:18
 Epoch: 231, lr: 2.0e-03, train_loss: 0.6000, train_acc: 0.8208 test_loss: 0.5626, test_acc: 0.8301, best: 0.8411, time: 0:00:18
 Epoch: 232, lr: 2.0e-03, train_loss: 0.5805, train_acc: 0.8304 test_loss: 0.5569, test_acc: 0.8356, best: 0.8411, time: 0:00:18
 Epoch: 233, lr: 2.0e-03, train_loss: 0.5781, train_acc: 0.8368 test_loss: 0.5336, test_acc: 0.8331, best: 0.8411, time: 0:00:18
 Epoch: 234, lr: 2.0e-03, train_loss: 0.5680, train_acc: 0.8372 test_loss: 0.5350, test_acc: 0.8366, best: 0.8411, time: 0:00:18
 Epoch: 235, lr: 2.0e-03, train_loss: 0.5659, train_acc: 0.8334 test_loss: 0.5299, test_acc: 0.8379, best: 0.8411, time: 0:00:18
 Epoch: 236, lr: 2.0e-03, train_loss: 0.5657, train_acc: 0.8348 test_loss: 0.5307, test_acc: 0.8359, best: 0.8411, time: 0:00:18
 Epoch: 237, lr: 2.0e-03, train_loss: 0.5582, train_acc: 0.8418 test_loss: 0.5661, test_acc: 0.8364, best: 0.8411, time: 0:00:18
 Epoch: 238, lr: 2.0e-03, train_loss: 0.5740, train_acc: 0.8334 test_loss: 0.6277, test_acc: 0.8273, best: 0.8411, time: 0:00:18
 Epoch: 239, lr: 2.0e-03, train_loss: 0.5818, train_acc: 0.8264 test_loss: 0.5346, test_acc: 0.8330, best: 0.8411, time: 0:00:18
 Epoch: 240, lr: 4.0e-04, train_loss: 0.5607, train_acc: 0.8412 test_loss: 0.5460, test_acc: 0.8346, best: 0.8411, time: 0:00:18
 Epoch: 241, lr: 4.0e-04, train_loss: 0.5910, train_acc: 0.8248 test_loss: 0.5652, test_acc: 0.8373, best: 0.8411, time: 0:00:18
 Epoch: 242, lr: 4.0e-04, train_loss: 0.5471, train_acc: 0.8546 test_loss: 0.5315, test_acc: 0.8407, best: 0.8411, time: 0:00:18
 Epoch: 243, lr: 4.0e-04, train_loss: 0.5540, train_acc: 0.8494 test_loss: 0.5566, test_acc: 0.8364, best: 0.8411, time: 0:00:18
 Epoch: 244, lr: 4.0e-04, train_loss: 0.5402, train_acc: 0.8498 test_loss: 0.5477, test_acc: 0.8357, best: 0.8411, time: 0:00:18
 Epoch: 245, lr: 4.0e-04, train_loss: 0.5754, train_acc: 0.8230 test_loss: 0.5373, test_acc: 0.8389, best: 0.8411, time: 0:00:18
 Epoch: 246, lr: 4.0e-04, train_loss: 0.5749, train_acc: 0.8274 test_loss: 0.5388, test_acc: 0.8363, best: 0.8411, time: 0:00:18
 Epoch: 247, lr: 4.0e-04, train_loss: 0.5796, train_acc: 0.8332 test_loss: 0.5540, test_acc: 0.8386, best: 0.8411, time: 0:00:18
 Epoch: 248, lr: 4.0e-04, train_loss: 0.5714, train_acc: 0.8398 test_loss: 0.5319, test_acc: 0.8367, best: 0.8411, time: 0:00:18
 Epoch: 249, lr: 4.0e-04, train_loss: 0.5532, train_acc: 0.8376 test_loss: 0.5292, test_acc: 0.8386, best: 0.8411, time: 0:00:18
 Epoch: 250, lr: 4.0e-04, train_loss: 0.5594, train_acc: 0.8426 test_loss: 0.5263, test_acc: 0.8377, best: 0.8411, time: 0:00:18
 Epoch: 251, lr: 4.0e-04, train_loss: 0.5523, train_acc: 0.8516 test_loss: 0.5646, test_acc: 0.8370, best: 0.8411, time: 0:00:18
 Epoch: 252, lr: 4.0e-04, train_loss: 0.5694, train_acc: 0.8444 test_loss: 0.5430, test_acc: 0.8387, best: 0.8411, time: 0:00:18
 Epoch: 253, lr: 4.0e-04, train_loss: 0.5650, train_acc: 0.8436 test_loss: 0.5599, test_acc: 0.8391, best: 0.8411, time: 0:00:18
 Epoch: 254, lr: 4.0e-04, train_loss: 0.5521, train_acc: 0.8408 test_loss: 0.5729, test_acc: 0.8367, best: 0.8411, time: 0:00:18
 Epoch: 255, lr: 4.0e-04, train_loss: 0.5544, train_acc: 0.8372 test_loss: 0.5530, test_acc: 0.8409, best: 0.8411, time: 0:00:18
 Epoch: 256, lr: 4.0e-04, train_loss: 0.5551, train_acc: 0.8424 test_loss: 0.5343, test_acc: 0.8349, best: 0.8411, time: 0:00:18
 Epoch: 257, lr: 4.0e-04, train_loss: 0.5701, train_acc: 0.8364 test_loss: 0.5432, test_acc: 0.8366, best: 0.8411, time: 0:00:18
 Epoch: 258, lr: 4.0e-04, train_loss: 0.5511, train_acc: 0.8520 test_loss: 0.5165, test_acc: 0.8375, best: 0.8411, time: 0:00:18
 Epoch: 259, lr: 4.0e-04, train_loss: 0.5612, train_acc: 0.8390 test_loss: 0.5729, test_acc: 0.8370, best: 0.8411, time: 0:00:18
 Epoch: 260, lr: 4.0e-04, train_loss: 0.5451, train_acc: 0.8488 test_loss: 0.5528, test_acc: 0.8363, best: 0.8411, time: 0:00:18
 Epoch: 261, lr: 4.0e-04, train_loss: 0.5721, train_acc: 0.8316 test_loss: 0.5376, test_acc: 0.8396, best: 0.8411, time: 0:00:18
 Epoch: 262, lr: 4.0e-04, train_loss: 0.5575, train_acc: 0.8444 test_loss: 0.5429, test_acc: 0.8360, best: 0.8411, time: 0:00:18
 Epoch: 263, lr: 4.0e-04, train_loss: 0.5557, train_acc: 0.8470 test_loss: 0.5429, test_acc: 0.8376, best: 0.8411, time: 0:00:18
 Epoch: 264, lr: 4.0e-04, train_loss: 0.5598, train_acc: 0.8382 test_loss: 0.5614, test_acc: 0.8375, best: 0.8411, time: 0:00:18
 Epoch: 265, lr: 4.0e-04, train_loss: 0.5752, train_acc: 0.8422 test_loss: 0.5629, test_acc: 0.8387, best: 0.8411, time: 0:00:18
 Epoch: 266, lr: 4.0e-04, train_loss: 0.5693, train_acc: 0.8318 test_loss: 0.5589, test_acc: 0.8383, best: 0.8411, time: 0:00:18
 Epoch: 267, lr: 4.0e-04, train_loss: 0.5441, train_acc: 0.8468 test_loss: 0.5390, test_acc: 0.8385, best: 0.8411, time: 0:00:18
 Epoch: 268, lr: 4.0e-04, train_loss: 0.5627, train_acc: 0.8390 test_loss: 0.5420, test_acc: 0.8389, best: 0.8411, time: 0:00:18
 Epoch: 269, lr: 4.0e-04, train_loss: 0.5610, train_acc: 0.8460 test_loss: 0.5210, test_acc: 0.8367, best: 0.8411, time: 0:00:18
 Epoch: 270, lr: 8.0e-05, train_loss: 0.5385, train_acc: 0.8464 test_loss: 0.5263, test_acc: 0.8391, best: 0.8411, time: 0:00:18
 Epoch: 271, lr: 8.0e-05, train_loss: 0.5759, train_acc: 0.8304 test_loss: 0.5573, test_acc: 0.8380, best: 0.8411, time: 0:00:18
 Epoch: 272, lr: 8.0e-05, train_loss: 0.5659, train_acc: 0.8320 test_loss: 0.5315, test_acc: 0.8399, best: 0.8411, time: 0:00:18
 Epoch: 273, lr: 8.0e-05, train_loss: 0.5650, train_acc: 0.8464 test_loss: 0.5252, test_acc: 0.8401, best: 0.8411, time: 0:00:18
 Epoch: 274, lr: 8.0e-05, train_loss: 0.5408, train_acc: 0.8554 test_loss: 0.5607, test_acc: 0.8377, best: 0.8411, time: 0:00:18
 Epoch: 275, lr: 8.0e-05, train_loss: 0.5545, train_acc: 0.8506 test_loss: 0.5386, test_acc: 0.8390, best: 0.8411, time: 0:00:18
 Epoch: 276, lr: 8.0e-05, train_loss: 0.5403, train_acc: 0.8514 test_loss: 0.5319, test_acc: 0.8384, best: 0.8411, time: 0:00:18
 Epoch: 277, lr: 8.0e-05, train_loss: 0.5557, train_acc: 0.8428 test_loss: 0.5861, test_acc: 0.8379, best: 0.8411, time: 0:00:18
 Epoch: 278, lr: 8.0e-05, train_loss: 0.5526, train_acc: 0.8468 test_loss: 0.5319, test_acc: 0.8395, best: 0.8411, time: 0:00:18
 Epoch: 279, lr: 8.0e-05, train_loss: 0.5539, train_acc: 0.8442 test_loss: 0.5552, test_acc: 0.8387, best: 0.8411, time: 0:00:18
 Epoch: 280, lr: 8.0e-05, train_loss: 0.5701, train_acc: 0.8416 test_loss: 0.5515, test_acc: 0.8373, best: 0.8411, time: 0:00:18
 Epoch: 281, lr: 8.0e-05, train_loss: 0.5476, train_acc: 0.8438 test_loss: 0.5454, test_acc: 0.8387, best: 0.8411, time: 0:00:18
 Epoch: 282, lr: 8.0e-05, train_loss: 0.5735, train_acc: 0.8336 test_loss: 0.5365, test_acc: 0.8380, best: 0.8411, time: 0:00:18
 Epoch: 283, lr: 8.0e-05, train_loss: 0.5579, train_acc: 0.8334 test_loss: 0.5437, test_acc: 0.8390, best: 0.8411, time: 0:00:18
 Epoch: 284, lr: 8.0e-05, train_loss: 0.5559, train_acc: 0.8384 test_loss: 0.5744, test_acc: 0.8381, best: 0.8411, time: 0:00:18
 Epoch: 285, lr: 8.0e-05, train_loss: 0.5648, train_acc: 0.8356 test_loss: 0.5390, test_acc: 0.8386, best: 0.8411, time: 0:00:18
 Epoch: 286, lr: 8.0e-05, train_loss: 0.5672, train_acc: 0.8340 test_loss: 0.5732, test_acc: 0.8377, best: 0.8411, time: 0:00:18
 Epoch: 287, lr: 8.0e-05, train_loss: 0.5783, train_acc: 0.8298 test_loss: 0.5779, test_acc: 0.8399, best: 0.8411, time: 0:00:18
 Epoch: 288, lr: 8.0e-05, train_loss: 0.5655, train_acc: 0.8338 test_loss: 0.5403, test_acc: 0.8381, best: 0.8411, time: 0:00:18
 Epoch: 289, lr: 8.0e-05, train_loss: 0.5499, train_acc: 0.8422 test_loss: 0.5369, test_acc: 0.8394, best: 0.8411, time: 0:00:18
 Epoch: 290, lr: 8.0e-05, train_loss: 0.5680, train_acc: 0.8336 test_loss: 0.5487, test_acc: 0.8381, best: 0.8411, time: 0:00:18
 Epoch: 291, lr: 8.0e-05, train_loss: 0.5656, train_acc: 0.8324 test_loss: 0.5312, test_acc: 0.8393, best: 0.8411, time: 0:00:17
 Epoch: 292, lr: 8.0e-05, train_loss: 0.5560, train_acc: 0.8300 test_loss: 0.5501, test_acc: 0.8385, best: 0.8411, time: 0:00:18
 Epoch: 293, lr: 8.0e-05, train_loss: 0.5536, train_acc: 0.8508 test_loss: 0.5449, test_acc: 0.8371, best: 0.8411, time: 0:00:17
 Epoch: 294, lr: 8.0e-05, train_loss: 0.5545, train_acc: 0.8422 test_loss: 0.5837, test_acc: 0.8377, best: 0.8411, time: 0:00:17
 Epoch: 295, lr: 8.0e-05, train_loss: 0.5613, train_acc: 0.8430 test_loss: 0.5347, test_acc: 0.8391, best: 0.8411, time: 0:00:17
 Epoch: 296, lr: 8.0e-05, train_loss: 0.5594, train_acc: 0.8372 test_loss: 0.5416, test_acc: 0.8357, best: 0.8411, time: 0:00:18
 Epoch: 297, lr: 8.0e-05, train_loss: 0.5568, train_acc: 0.8438 test_loss: 0.5330, test_acc: 0.8410, best: 0.8411, time: 0:00:18
 Epoch: 298, lr: 8.0e-05, train_loss: 0.5593, train_acc: 0.8456 test_loss: 0.5147, test_acc: 0.8400, best: 0.8411, time: 0:00:18
 Epoch: 299, lr: 8.0e-05, train_loss: 0.5592, train_acc: 0.8544 test_loss: 0.5846, test_acc: 0.8403, best: 0.8411, time: 0:00:18
 Epoch: 300, lr: 8.0e-05, train_loss: 0.5501, train_acc: 0.8456 test_loss: 0.5291, test_acc: 0.8401, best: 0.8411, time: 0:00:18
 Highest accuracy: 0.8411