
 Run on time: 2024-03-22 15:35:41.047431

 Architecture: mobilenetv2-1-1222121

 Arguments:
	 root                 : ./
	 seed                 : 0
	 devices              : 0
	 dataset              : STL10
	 im_size              : 128
	 batch_size           : 8
	 architecture         : mobilenetv2-1-1222121
	 pretrained           : 
	 epochs               : 300
	 learning_rate        : 0.01
	 lr_interval          : 0.6 0.8 0.9
	 lr_reduce            : 5
	 optimizer            : SGD
	 log                  : True
	 test_only            : False
	 dont_save            : False

 Model: DataParallel(
  (module): Network(
    (net): MobileNetV2(
      (features): Sequential(
        (0): Sequential(
          (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU6(inplace=True)
        )
        (1): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (2): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)
            (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (3): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (4): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(144, 144, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=144, bias=False)
            (4): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(144, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (5): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (6): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (7): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(32, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=192, bias=False)
            (4): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (8): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (9): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (10): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (11): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(64, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(384, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=384, bias=False)
            (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(384, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (12): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (13): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (14): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(96, 576, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(576, 576, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=576, bias=False)
            (4): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(576, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (15): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (16): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (17): InvertedResidual(
          (conv): Sequential(
            (0): Conv2d(160, 960, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): ReLU6(inplace=True)
            (3): Conv2d(960, 960, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=960, bias=False)
            (4): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (5): ReLU6(inplace=True)
            (6): Conv2d(960, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (7): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
      )
      (conv): Sequential(
        (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU6(inplace=True)
      )
      (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
      (classifier): Linear(in_features=1280, out_features=10, bias=True)
    )
  )
)

 Optimizer: SGD (
Parameter Group 0
    dampening: 0
    differentiable: False
    foreach: None
    lr: 0.01
    maximize: False
    momentum: 0.9
    nesterov: False
    weight_decay: 0.0
)
 Epoch: 1, lr: 1.0e-02, train_loss: 2.3939, train_acc: 0.1770 test_loss: 1.9720, test_acc: 0.2594, best: 0.2594, time: 0:00:19
 Epoch: 2, lr: 1.0e-02, train_loss: 2.1007, train_acc: 0.2226 test_loss: 1.7522, test_acc: 0.3070, best: 0.3070, time: 0:00:17
 Epoch: 3, lr: 1.0e-02, train_loss: 2.0450, train_acc: 0.2526 test_loss: 1.7282, test_acc: 0.3106, best: 0.3106, time: 0:00:17
 Epoch: 4, lr: 1.0e-02, train_loss: 1.9927, train_acc: 0.2738 test_loss: 1.6294, test_acc: 0.3769, best: 0.3769, time: 0:00:21
 Epoch: 5, lr: 1.0e-02, train_loss: 1.9558, train_acc: 0.2946 test_loss: 1.6102, test_acc: 0.3782, best: 0.3782, time: 0:00:21
 Epoch: 6, lr: 1.0e-02, train_loss: 1.9434, train_acc: 0.2962 test_loss: 1.5397, test_acc: 0.4119, best: 0.4119, time: 0:00:52
 Epoch: 7, lr: 1.0e-02, train_loss: 1.9218, train_acc: 0.3132 test_loss: 1.6115, test_acc: 0.3693, best: 0.4119, time: 0:01:16
 Epoch: 8, lr: 1.0e-02, train_loss: 1.8661, train_acc: 0.3356 test_loss: 1.4865, test_acc: 0.4283, best: 0.4283, time: 0:01:19
 Epoch: 9, lr: 1.0e-02, train_loss: 1.8625, train_acc: 0.3442 test_loss: 1.4122, test_acc: 0.4826, best: 0.4826, time: 0:01:21
 Epoch: 10, lr: 1.0e-02, train_loss: 1.8649, train_acc: 0.3446 test_loss: 1.4566, test_acc: 0.4631, best: 0.4826, time: 0:01:18
 Epoch: 11, lr: 1.0e-02, train_loss: 1.8156, train_acc: 0.3590 test_loss: 1.3339, test_acc: 0.5071, best: 0.5071, time: 0:01:18
 Epoch: 12, lr: 1.0e-02, train_loss: 1.7893, train_acc: 0.3778 test_loss: 1.3484, test_acc: 0.5078, best: 0.5078, time: 0:01:15
 Epoch: 13, lr: 1.0e-02, train_loss: 1.7760, train_acc: 0.3888 test_loss: 1.3323, test_acc: 0.5020, best: 0.5078, time: 0:01:19
 Epoch: 14, lr: 1.0e-02, train_loss: 1.7681, train_acc: 0.3980 test_loss: 1.2896, test_acc: 0.5321, best: 0.5321, time: 0:01:20
 Epoch: 15, lr: 1.0e-02, train_loss: 1.7495, train_acc: 0.3980 test_loss: 1.3052, test_acc: 0.5119, best: 0.5321, time: 0:01:20
 Epoch: 16, lr: 1.0e-02, train_loss: 1.7257, train_acc: 0.4018 test_loss: 1.2629, test_acc: 0.5376, best: 0.5376, time: 0:01:13
 Epoch: 17, lr: 1.0e-02, train_loss: 1.7137, train_acc: 0.4248 test_loss: 1.2328, test_acc: 0.5534, best: 0.5534, time: 0:01:14
 Epoch: 18, lr: 1.0e-02, train_loss: 1.7033, train_acc: 0.4274 test_loss: 1.2323, test_acc: 0.5481, best: 0.5534, time: 0:01:24
 Epoch: 19, lr: 1.0e-02, train_loss: 1.6762, train_acc: 0.4316 test_loss: 1.2446, test_acc: 0.5475, best: 0.5534, time: 0:01:22
 Epoch: 20, lr: 1.0e-02, train_loss: 1.6760, train_acc: 0.4324 test_loss: 1.2081, test_acc: 0.5629, best: 0.5629, time: 0:01:15
 Epoch: 21, lr: 1.0e-02, train_loss: 1.6178, train_acc: 0.4482 test_loss: 1.1838, test_acc: 0.5795, best: 0.5795, time: 0:01:18
 Epoch: 22, lr: 1.0e-02, train_loss: 1.6564, train_acc: 0.4582 test_loss: 1.1479, test_acc: 0.5877, best: 0.5877, time: 0:01:18
 Epoch: 23, lr: 1.0e-02, train_loss: 1.6145, train_acc: 0.4620 test_loss: 1.2191, test_acc: 0.5543, best: 0.5877, time: 0:01:16
 Epoch: 24, lr: 1.0e-02, train_loss: 1.6059, train_acc: 0.4670 test_loss: 1.1565, test_acc: 0.6084, best: 0.6084, time: 0:01:16
 Epoch: 25, lr: 1.0e-02, train_loss: 1.5880, train_acc: 0.4792 test_loss: 1.1547, test_acc: 0.5915, best: 0.6084, time: 0:01:20
 Epoch: 26, lr: 1.0e-02, train_loss: 1.5980, train_acc: 0.4810 test_loss: 1.1054, test_acc: 0.6159, best: 0.6159, time: 0:01:22
 Epoch: 27, lr: 1.0e-02, train_loss: 1.5996, train_acc: 0.4788 test_loss: 1.0439, test_acc: 0.6411, best: 0.6411, time: 0:01:17
 Epoch: 28, lr: 1.0e-02, train_loss: 1.5566, train_acc: 0.4892 test_loss: 1.0735, test_acc: 0.6224, best: 0.6411, time: 0:01:12
 Epoch: 29, lr: 1.0e-02, train_loss: 1.5265, train_acc: 0.5024 test_loss: 1.0505, test_acc: 0.6340, best: 0.6411, time: 0:01:18
 Epoch: 30, lr: 1.0e-02, train_loss: 1.5113, train_acc: 0.5160 test_loss: 1.0751, test_acc: 0.6222, best: 0.6411, time: 0:01:18
 Epoch: 31, lr: 1.0e-02, train_loss: 1.5492, train_acc: 0.4956 test_loss: 0.9914, test_acc: 0.6603, best: 0.6603, time: 0:01:16
 Epoch: 32, lr: 1.0e-02, train_loss: 1.4970, train_acc: 0.5170 test_loss: 1.0183, test_acc: 0.6396, best: 0.6603, time: 0:01:16
 Epoch: 33, lr: 1.0e-02, train_loss: 1.5085, train_acc: 0.5150 test_loss: 1.0239, test_acc: 0.6404, best: 0.6603, time: 0:01:21
 Epoch: 34, lr: 1.0e-02, train_loss: 1.5330, train_acc: 0.5072 test_loss: 1.0048, test_acc: 0.6509, best: 0.6603, time: 0:01:20
 Epoch: 35, lr: 1.0e-02, train_loss: 1.5060, train_acc: 0.5294 test_loss: 0.9747, test_acc: 0.6576, best: 0.6603, time: 0:01:14
 Epoch: 36, lr: 1.0e-02, train_loss: 1.4759, train_acc: 0.5302 test_loss: 0.9822, test_acc: 0.6633, best: 0.6633, time: 0:01:16
 Epoch: 37, lr: 1.0e-02, train_loss: 1.4801, train_acc: 0.5246 test_loss: 0.9693, test_acc: 0.6671, best: 0.6671, time: 0:01:20
 Epoch: 38, lr: 1.0e-02, train_loss: 1.4916, train_acc: 0.5260 test_loss: 0.9597, test_acc: 0.6665, best: 0.6671, time: 0:01:20
 Epoch: 39, lr: 1.0e-02, train_loss: 1.4781, train_acc: 0.5356 test_loss: 0.9977, test_acc: 0.6581, best: 0.6671, time: 0:01:18
 Epoch: 40, lr: 1.0e-02, train_loss: 1.4417, train_acc: 0.5490 test_loss: 0.9544, test_acc: 0.6613, best: 0.6671, time: 0:01:22
 Epoch: 41, lr: 1.0e-02, train_loss: 1.4648, train_acc: 0.5378 test_loss: 0.9837, test_acc: 0.6676, best: 0.6676, time: 0:01:27
 Epoch: 42, lr: 1.0e-02, train_loss: 1.4261, train_acc: 0.5576 test_loss: 0.9698, test_acc: 0.6542, best: 0.6676, time: 0:01:25
 Epoch: 43, lr: 1.0e-02, train_loss: 1.4475, train_acc: 0.5518 test_loss: 0.9637, test_acc: 0.6687, best: 0.6687, time: 0:01:19
 Epoch: 44, lr: 1.0e-02, train_loss: 1.4313, train_acc: 0.5528 test_loss: 0.9886, test_acc: 0.6577, best: 0.6687, time: 0:01:18
 Epoch: 45, lr: 1.0e-02, train_loss: 1.4040, train_acc: 0.5680 test_loss: 1.0091, test_acc: 0.6446, best: 0.6687, time: 0:01:19
 Epoch: 46, lr: 1.0e-02, train_loss: 1.4254, train_acc: 0.5550 test_loss: 0.9605, test_acc: 0.6649, best: 0.6687, time: 0:01:19
 Epoch: 47, lr: 1.0e-02, train_loss: 1.3685, train_acc: 0.5662 test_loss: 0.8653, test_acc: 0.7040, best: 0.7040, time: 0:01:12
 Epoch: 48, lr: 1.0e-02, train_loss: 1.3929, train_acc: 0.5700 test_loss: 0.8961, test_acc: 0.6897, best: 0.7040, time: 0:01:17
 Epoch: 49, lr: 1.0e-02, train_loss: 1.3868, train_acc: 0.5798 test_loss: 0.9103, test_acc: 0.6807, best: 0.7040, time: 0:01:19
 Epoch: 50, lr: 1.0e-02, train_loss: 1.3981, train_acc: 0.5742 test_loss: 0.9185, test_acc: 0.6906, best: 0.7040, time: 0:01:20
 Epoch: 51, lr: 1.0e-02, train_loss: 1.3924, train_acc: 0.5734 test_loss: 0.8347, test_acc: 0.7215, best: 0.7215, time: 0:01:13
 Epoch: 52, lr: 1.0e-02, train_loss: 1.3790, train_acc: 0.5814 test_loss: 0.9173, test_acc: 0.6864, best: 0.7215, time: 0:01:18
 Epoch: 53, lr: 1.0e-02, train_loss: 1.3576, train_acc: 0.5854 test_loss: 0.8808, test_acc: 0.7064, best: 0.7215, time: 0:01:19
 Epoch: 54, lr: 1.0e-02, train_loss: 1.3368, train_acc: 0.6004 test_loss: 0.8167, test_acc: 0.7181, best: 0.7215, time: 0:01:20
 Epoch: 55, lr: 1.0e-02, train_loss: 1.3368, train_acc: 0.5868 test_loss: 0.8258, test_acc: 0.7131, best: 0.7215, time: 0:01:19
 Epoch: 56, lr: 1.0e-02, train_loss: 1.3333, train_acc: 0.5942 test_loss: 0.8045, test_acc: 0.7348, best: 0.7348, time: 0:01:12
 Epoch: 57, lr: 1.0e-02, train_loss: 1.3215, train_acc: 0.6008 test_loss: 0.7893, test_acc: 0.7345, best: 0.7348, time: 0:01:19
 Epoch: 58, lr: 1.0e-02, train_loss: 1.3720, train_acc: 0.5916 test_loss: 0.7949, test_acc: 0.7390, best: 0.7390, time: 0:01:18
 Epoch: 59, lr: 1.0e-02, train_loss: 1.3303, train_acc: 0.5974 test_loss: 0.8376, test_acc: 0.7086, best: 0.7390, time: 0:01:19
 Epoch: 60, lr: 1.0e-02, train_loss: 1.3548, train_acc: 0.5972 test_loss: 0.8505, test_acc: 0.7280, best: 0.7390, time: 0:01:13
 Epoch: 61, lr: 1.0e-02, train_loss: 1.3233, train_acc: 0.6088 test_loss: 0.7648, test_acc: 0.7458, best: 0.7458, time: 0:01:17
 Epoch: 62, lr: 1.0e-02, train_loss: 1.3345, train_acc: 0.5996 test_loss: 0.8294, test_acc: 0.7265, best: 0.7458, time: 0:01:18
 Epoch: 63, lr: 1.0e-02, train_loss: 1.3437, train_acc: 0.6088 test_loss: 0.8251, test_acc: 0.7375, best: 0.7458, time: 0:01:22
 Epoch: 64, lr: 1.0e-02, train_loss: 1.3000, train_acc: 0.6168 test_loss: 0.8248, test_acc: 0.7083, best: 0.7458, time: 0:01:17
 Epoch: 65, lr: 1.0e-02, train_loss: 1.2973, train_acc: 0.6148 test_loss: 0.8096, test_acc: 0.7354, best: 0.7458, time: 0:01:14
 Epoch: 66, lr: 1.0e-02, train_loss: 1.3111, train_acc: 0.6146 test_loss: 0.7667, test_acc: 0.7430, best: 0.7458, time: 0:01:20
 Epoch: 67, lr: 1.0e-02, train_loss: 1.3077, train_acc: 0.6164 test_loss: 0.7812, test_acc: 0.7368, best: 0.7458, time: 0:01:20
 Epoch: 68, lr: 1.0e-02, train_loss: 1.3062, train_acc: 0.6162 test_loss: 0.7554, test_acc: 0.7479, best: 0.7479, time: 0:01:16
 Epoch: 69, lr: 1.0e-02, train_loss: 1.3107, train_acc: 0.6128 test_loss: 0.7362, test_acc: 0.7551, best: 0.7551, time: 0:01:16
 Epoch: 70, lr: 1.0e-02, train_loss: 1.2684, train_acc: 0.6272 test_loss: 0.7998, test_acc: 0.7380, best: 0.7551, time: 0:01:20
 Epoch: 71, lr: 1.0e-02, train_loss: 1.2836, train_acc: 0.6210 test_loss: 0.7725, test_acc: 0.7381, best: 0.7551, time: 0:01:20
 Epoch: 72, lr: 1.0e-02, train_loss: 1.2963, train_acc: 0.6266 test_loss: 0.7489, test_acc: 0.7476, best: 0.7551, time: 0:01:18
 Epoch: 73, lr: 1.0e-02, train_loss: 1.2639, train_acc: 0.6378 test_loss: 0.7829, test_acc: 0.7401, best: 0.7551, time: 0:01:20
 Epoch: 74, lr: 1.0e-02, train_loss: 1.2727, train_acc: 0.6342 test_loss: 0.7422, test_acc: 0.7578, best: 0.7578, time: 0:01:13
 Epoch: 75, lr: 1.0e-02, train_loss: 1.2837, train_acc: 0.6344 test_loss: 0.7391, test_acc: 0.7556, best: 0.7578, time: 0:01:21
 Epoch: 76, lr: 1.0e-02, train_loss: 1.2564, train_acc: 0.6254 test_loss: 0.7444, test_acc: 0.7536, best: 0.7578, time: 0:01:17
 Epoch: 77, lr: 1.0e-02, train_loss: 1.2412, train_acc: 0.6526 test_loss: 0.7608, test_acc: 0.7541, best: 0.7578, time: 0:01:19
 Epoch: 78, lr: 1.0e-02, train_loss: 1.2379, train_acc: 0.6506 test_loss: 0.7230, test_acc: 0.7635, best: 0.7635, time: 0:01:13
 Epoch: 79, lr: 1.0e-02, train_loss: 1.2412, train_acc: 0.6476 test_loss: 0.7376, test_acc: 0.7592, best: 0.7635, time: 0:01:19
 Epoch: 80, lr: 1.0e-02, train_loss: 1.1641, train_acc: 0.6666 test_loss: 0.6898, test_acc: 0.7734, best: 0.7734, time: 0:01:18
 Epoch: 81, lr: 1.0e-02, train_loss: 1.2246, train_acc: 0.6580 test_loss: 0.7102, test_acc: 0.7630, best: 0.7734, time: 0:01:11
 Epoch: 82, lr: 1.0e-02, train_loss: 1.2487, train_acc: 0.6384 test_loss: 0.7256, test_acc: 0.7616, best: 0.7734, time: 0:01:19
 Epoch: 83, lr: 1.0e-02, train_loss: 1.2505, train_acc: 0.6444 test_loss: 0.7776, test_acc: 0.7576, best: 0.7734, time: 0:01:18
 Epoch: 84, lr: 1.0e-02, train_loss: 1.1961, train_acc: 0.6554 test_loss: 0.6840, test_acc: 0.7675, best: 0.7734, time: 0:01:15
 Epoch: 85, lr: 1.0e-02, train_loss: 1.2203, train_acc: 0.6528 test_loss: 0.6854, test_acc: 0.7786, best: 0.7786, time: 0:01:12
 Epoch: 86, lr: 1.0e-02, train_loss: 1.2345, train_acc: 0.6562 test_loss: 0.6865, test_acc: 0.7732, best: 0.7786, time: 0:01:19
 Epoch: 87, lr: 1.0e-02, train_loss: 1.2228, train_acc: 0.6436 test_loss: 0.7089, test_acc: 0.7678, best: 0.7786, time: 0:01:20
 Epoch: 88, lr: 1.0e-02, train_loss: 1.2325, train_acc: 0.6572 test_loss: 0.7008, test_acc: 0.7709, best: 0.7786, time: 0:01:15
 Epoch: 89, lr: 1.0e-02, train_loss: 1.2186, train_acc: 0.6538 test_loss: 0.7312, test_acc: 0.7735, best: 0.7786, time: 0:01:15
 Epoch: 90, lr: 1.0e-02, train_loss: 1.1801, train_acc: 0.6748 test_loss: 0.6566, test_acc: 0.7884, best: 0.7884, time: 0:01:18
 Epoch: 91, lr: 1.0e-02, train_loss: 1.1921, train_acc: 0.6662 test_loss: 0.6745, test_acc: 0.7796, best: 0.7884, time: 0:01:19
 Epoch: 92, lr: 1.0e-02, train_loss: 1.1610, train_acc: 0.6720 test_loss: 0.6705, test_acc: 0.7748, best: 0.7884, time: 0:01:16
 Epoch: 93, lr: 1.0e-02, train_loss: 1.1609, train_acc: 0.6796 test_loss: 0.6871, test_acc: 0.7774, best: 0.7884, time: 0:01:16
 Epoch: 94, lr: 1.0e-02, train_loss: 1.1456, train_acc: 0.6782 test_loss: 0.6555, test_acc: 0.7910, best: 0.7910, time: 0:01:19
 Epoch: 95, lr: 1.0e-02, train_loss: 1.1591, train_acc: 0.6836 test_loss: 0.7077, test_acc: 0.7766, best: 0.7910, time: 0:01:20
 Epoch: 96, lr: 1.0e-02, train_loss: 1.1659, train_acc: 0.6764 test_loss: 0.7066, test_acc: 0.7691, best: 0.7910, time: 0:01:21
 Epoch: 97, lr: 1.0e-02, train_loss: 1.1921, train_acc: 0.6684 test_loss: 0.6606, test_acc: 0.7823, best: 0.7910, time: 0:01:15
 Epoch: 98, lr: 1.0e-02, train_loss: 1.1607, train_acc: 0.6730 test_loss: 0.6623, test_acc: 0.7936, best: 0.7936, time: 0:01:18
 Epoch: 99, lr: 1.0e-02, train_loss: 1.1520, train_acc: 0.6888 test_loss: 0.6660, test_acc: 0.7906, best: 0.7936, time: 0:01:20
 Epoch: 100, lr: 1.0e-02, train_loss: 1.1609, train_acc: 0.6718 test_loss: 0.6295, test_acc: 0.7927, best: 0.7936, time: 0:01:19
 Epoch: 101, lr: 1.0e-02, train_loss: 1.1575, train_acc: 0.6774 test_loss: 0.6343, test_acc: 0.7934, best: 0.7936, time: 0:01:19
 Epoch: 102, lr: 1.0e-02, train_loss: 1.1580, train_acc: 0.6838 test_loss: 0.6634, test_acc: 0.7855, best: 0.7936, time: 0:01:12
 Epoch: 103, lr: 1.0e-02, train_loss: 1.1728, train_acc: 0.6844 test_loss: 0.7121, test_acc: 0.7785, best: 0.7936, time: 0:01:19
 Epoch: 104, lr: 1.0e-02, train_loss: 1.1424, train_acc: 0.6846 test_loss: 0.5929, test_acc: 0.8060, best: 0.8060, time: 0:01:19
 Epoch: 105, lr: 1.0e-02, train_loss: 1.1503, train_acc: 0.6878 test_loss: 0.6954, test_acc: 0.7843, best: 0.8060, time: 0:01:19
 Epoch: 106, lr: 1.0e-02, train_loss: 1.1462, train_acc: 0.6860 test_loss: 0.6236, test_acc: 0.7964, best: 0.8060, time: 0:01:13
 Epoch: 107, lr: 1.0e-02, train_loss: 1.1336, train_acc: 0.6888 test_loss: 0.6895, test_acc: 0.7833, best: 0.8060, time: 0:01:18
 Epoch: 108, lr: 1.0e-02, train_loss: 1.1223, train_acc: 0.6912 test_loss: 0.6443, test_acc: 0.7960, best: 0.8060, time: 0:01:18
 Epoch: 109, lr: 1.0e-02, train_loss: 1.1285, train_acc: 0.6902 test_loss: 0.6088, test_acc: 0.8007, best: 0.8060, time: 0:01:19
 Epoch: 110, lr: 1.0e-02, train_loss: 1.1729, train_acc: 0.6812 test_loss: 0.6415, test_acc: 0.7934, best: 0.8060, time: 0:01:14
 Epoch: 111, lr: 1.0e-02, train_loss: 1.1422, train_acc: 0.6890 test_loss: 0.6215, test_acc: 0.8047, best: 0.8060, time: 0:01:21
 Epoch: 112, lr: 1.0e-02, train_loss: 1.1009, train_acc: 0.7110 test_loss: 0.6244, test_acc: 0.8066, best: 0.8066, time: 0:01:22
 Epoch: 113, lr: 1.0e-02, train_loss: 1.1473, train_acc: 0.6838 test_loss: 0.6676, test_acc: 0.7850, best: 0.8066, time: 0:01:20
 Epoch: 114, lr: 1.0e-02, train_loss: 1.1162, train_acc: 0.6904 test_loss: 0.6435, test_acc: 0.7886, best: 0.8066, time: 0:01:19
 Epoch: 115, lr: 1.0e-02, train_loss: 1.1106, train_acc: 0.7004 test_loss: 0.6697, test_acc: 0.7864, best: 0.8066, time: 0:01:16
 Epoch: 116, lr: 1.0e-02, train_loss: 1.0904, train_acc: 0.7082 test_loss: 0.6000, test_acc: 0.8041, best: 0.8066, time: 0:01:12
 Epoch: 117, lr: 1.0e-02, train_loss: 1.0996, train_acc: 0.7028 test_loss: 0.6223, test_acc: 0.7973, best: 0.8066, time: 0:01:18
 Epoch: 118, lr: 1.0e-02, train_loss: 1.0990, train_acc: 0.7074 test_loss: 0.6121, test_acc: 0.8017, best: 0.8066, time: 0:01:20
 Epoch: 119, lr: 1.0e-02, train_loss: 1.1222, train_acc: 0.6968 test_loss: 0.6275, test_acc: 0.8049, best: 0.8066, time: 0:01:17
 Epoch: 120, lr: 1.0e-02, train_loss: 1.1563, train_acc: 0.6884 test_loss: 0.6053, test_acc: 0.8049, best: 0.8066, time: 0:01:15
 Epoch: 121, lr: 1.0e-02, train_loss: 1.1247, train_acc: 0.7032 test_loss: 0.6007, test_acc: 0.8120, best: 0.8120, time: 0:01:18
 Epoch: 122, lr: 1.0e-02, train_loss: 1.0967, train_acc: 0.7092 test_loss: 0.6347, test_acc: 0.7977, best: 0.8120, time: 0:01:19
 Epoch: 123, lr: 1.0e-02, train_loss: 1.0764, train_acc: 0.7106 test_loss: 0.5677, test_acc: 0.8087, best: 0.8120, time: 0:01:21
 Epoch: 124, lr: 1.0e-02, train_loss: 1.1229, train_acc: 0.7040 test_loss: 0.6176, test_acc: 0.8024, best: 0.8120, time: 0:01:20
 Epoch: 125, lr: 1.0e-02, train_loss: 1.0931, train_acc: 0.7110 test_loss: 0.6332, test_acc: 0.7914, best: 0.8120, time: 0:01:20
 Epoch: 126, lr: 1.0e-02, train_loss: 1.1160, train_acc: 0.7022 test_loss: 0.6894, test_acc: 0.7814, best: 0.8120, time: 0:01:16
 Epoch: 127, lr: 1.0e-02, train_loss: 1.0546, train_acc: 0.7250 test_loss: 0.6194, test_acc: 0.8034, best: 0.8120, time: 0:01:18
 Epoch: 128, lr: 1.0e-02, train_loss: 1.0515, train_acc: 0.7212 test_loss: 0.6008, test_acc: 0.8095, best: 0.8120, time: 0:01:17
 Epoch: 129, lr: 1.0e-02, train_loss: 1.0797, train_acc: 0.7108 test_loss: 0.6406, test_acc: 0.7971, best: 0.8120, time: 0:01:18
 Epoch: 130, lr: 1.0e-02, train_loss: 1.0763, train_acc: 0.7184 test_loss: 0.7059, test_acc: 0.7711, best: 0.8120, time: 0:01:16
 Epoch: 131, lr: 1.0e-02, train_loss: 1.0519, train_acc: 0.7276 test_loss: 0.6411, test_acc: 0.7995, best: 0.8120, time: 0:01:17
 Epoch: 132, lr: 1.0e-02, train_loss: 1.0730, train_acc: 0.7178 test_loss: 0.5936, test_acc: 0.8169, best: 0.8169, time: 0:01:19
 Epoch: 133, lr: 1.0e-02, train_loss: 1.0907, train_acc: 0.7088 test_loss: 0.6182, test_acc: 0.8066, best: 0.8169, time: 0:01:18
 Epoch: 134, lr: 1.0e-02, train_loss: 1.0445, train_acc: 0.7236 test_loss: 0.5796, test_acc: 0.8181, best: 0.8181, time: 0:01:23
 Epoch: 135, lr: 1.0e-02, train_loss: 1.0781, train_acc: 0.7162 test_loss: 0.6358, test_acc: 0.8003, best: 0.8181, time: 0:01:20
 Epoch: 136, lr: 1.0e-02, train_loss: 1.0454, train_acc: 0.7284 test_loss: 0.5698, test_acc: 0.8129, best: 0.8181, time: 0:01:14
 Epoch: 137, lr: 1.0e-02, train_loss: 1.0791, train_acc: 0.7142 test_loss: 0.5980, test_acc: 0.8135, best: 0.8181, time: 0:01:16
 Epoch: 138, lr: 1.0e-02, train_loss: 1.0240, train_acc: 0.7366 test_loss: 0.6608, test_acc: 0.8016, best: 0.8181, time: 0:01:21
 Epoch: 139, lr: 1.0e-02, train_loss: 1.0750, train_acc: 0.7284 test_loss: 0.5513, test_acc: 0.8275, best: 0.8275, time: 0:01:20
 Epoch: 140, lr: 1.0e-02, train_loss: 1.0452, train_acc: 0.7336 test_loss: 0.5787, test_acc: 0.8220, best: 0.8275, time: 0:01:21
 Epoch: 141, lr: 1.0e-02, train_loss: 1.0876, train_acc: 0.7116 test_loss: 0.5765, test_acc: 0.8250, best: 0.8275, time: 0:01:21
 Epoch: 142, lr: 1.0e-02, train_loss: 1.0486, train_acc: 0.7304 test_loss: 0.6146, test_acc: 0.8165, best: 0.8275, time: 0:01:17
 Epoch: 143, lr: 1.0e-02, train_loss: 1.0604, train_acc: 0.7282 test_loss: 0.5878, test_acc: 0.8194, best: 0.8275, time: 0:01:15
 Epoch: 144, lr: 1.0e-02, train_loss: 1.0434, train_acc: 0.7286 test_loss: 0.6020, test_acc: 0.8094, best: 0.8275, time: 0:01:20
 Epoch: 145, lr: 1.0e-02, train_loss: 1.0271, train_acc: 0.7326 test_loss: 0.5729, test_acc: 0.8111, best: 0.8275, time: 0:01:21
 Epoch: 146, lr: 1.0e-02, train_loss: 1.0537, train_acc: 0.7200 test_loss: 0.6010, test_acc: 0.8250, best: 0.8275, time: 0:01:20
 Epoch: 147, lr: 1.0e-02, train_loss: 1.0671, train_acc: 0.7216 test_loss: 0.5904, test_acc: 0.8184, best: 0.8275, time: 0:01:20
 Epoch: 148, lr: 1.0e-02, train_loss: 1.0129, train_acc: 0.7320 test_loss: 0.5724, test_acc: 0.8267, best: 0.8275, time: 0:01:21
 Epoch: 149, lr: 1.0e-02, train_loss: 1.0178, train_acc: 0.7378 test_loss: 0.6038, test_acc: 0.8090, best: 0.8275, time: 0:01:17
 Epoch: 150, lr: 1.0e-02, train_loss: 1.0636, train_acc: 0.7214 test_loss: 0.5701, test_acc: 0.8136, best: 0.8275, time: 0:01:19
 Epoch: 151, lr: 1.0e-02, train_loss: 1.0287, train_acc: 0.7304 test_loss: 0.6021, test_acc: 0.8079, best: 0.8275, time: 0:01:18
 Epoch: 152, lr: 1.0e-02, train_loss: 0.9971, train_acc: 0.7446 test_loss: 0.5475, test_acc: 0.8346, best: 0.8346, time: 0:01:19
 Epoch: 153, lr: 1.0e-02, train_loss: 1.0127, train_acc: 0.7340 test_loss: 0.5987, test_acc: 0.8120, best: 0.8346, time: 0:01:19
 Epoch: 154, lr: 1.0e-02, train_loss: 1.0325, train_acc: 0.7426 test_loss: 0.5977, test_acc: 0.8074, best: 0.8346, time: 0:01:16
 Epoch: 155, lr: 1.0e-02, train_loss: 1.0269, train_acc: 0.7318 test_loss: 0.6127, test_acc: 0.8011, best: 0.8346, time: 0:01:14
 Epoch: 156, lr: 1.0e-02, train_loss: 1.0520, train_acc: 0.7292 test_loss: 0.6349, test_acc: 0.8176, best: 0.8346, time: 0:01:19
 Epoch: 157, lr: 1.0e-02, train_loss: 1.0282, train_acc: 0.7378 test_loss: 0.6442, test_acc: 0.7955, best: 0.8346, time: 0:01:20
 Epoch: 158, lr: 1.0e-02, train_loss: 0.9933, train_acc: 0.7484 test_loss: 0.5524, test_acc: 0.8213, best: 0.8346, time: 0:01:20
 Epoch: 159, lr: 1.0e-02, train_loss: 1.0108, train_acc: 0.7422 test_loss: 0.5710, test_acc: 0.8121, best: 0.8346, time: 0:01:15
 Epoch: 160, lr: 1.0e-02, train_loss: 1.0263, train_acc: 0.7388 test_loss: 0.5933, test_acc: 0.8157, best: 0.8346, time: 0:01:17
 Epoch: 161, lr: 1.0e-02, train_loss: 0.9851, train_acc: 0.7452 test_loss: 0.5785, test_acc: 0.8151, best: 0.8346, time: 0:01:18
 Epoch: 162, lr: 1.0e-02, train_loss: 1.0276, train_acc: 0.7354 test_loss: 0.5708, test_acc: 0.8296, best: 0.8346, time: 0:01:20
 Epoch: 163, lr: 1.0e-02, train_loss: 1.0304, train_acc: 0.7298 test_loss: 0.6220, test_acc: 0.8063, best: 0.8346, time: 0:01:18
 Epoch: 164, lr: 1.0e-02, train_loss: 1.0199, train_acc: 0.7386 test_loss: 0.5902, test_acc: 0.8147, best: 0.8346, time: 0:01:15
 Epoch: 165, lr: 1.0e-02, train_loss: 0.9677, train_acc: 0.7606 test_loss: 0.5446, test_acc: 0.8253, best: 0.8346, time: 0:01:18
 Epoch: 166, lr: 1.0e-02, train_loss: 1.0146, train_acc: 0.7488 test_loss: 0.5993, test_acc: 0.8210, best: 0.8346, time: 0:01:19
 Epoch: 167, lr: 1.0e-02, train_loss: 0.9838, train_acc: 0.7500 test_loss: 0.5922, test_acc: 0.8175, best: 0.8346, time: 0:01:19
 Epoch: 168, lr: 1.0e-02, train_loss: 1.0083, train_acc: 0.7390 test_loss: 0.6027, test_acc: 0.8151, best: 0.8346, time: 0:01:19
 Epoch: 169, lr: 1.0e-02, train_loss: 1.0050, train_acc: 0.7464 test_loss: 0.6025, test_acc: 0.8183, best: 0.8346, time: 0:01:11
 Epoch: 170, lr: 1.0e-02, train_loss: 1.0378, train_acc: 0.7384 test_loss: 0.6239, test_acc: 0.8070, best: 0.8346, time: 0:01:21
 Epoch: 171, lr: 1.0e-02, train_loss: 1.0146, train_acc: 0.7456 test_loss: 0.5472, test_acc: 0.8224, best: 0.8346, time: 0:01:18
 Epoch: 172, lr: 1.0e-02, train_loss: 1.0393, train_acc: 0.7346 test_loss: 0.5677, test_acc: 0.8163, best: 0.8346, time: 0:01:20
 Epoch: 173, lr: 1.0e-02, train_loss: 0.9811, train_acc: 0.7546 test_loss: 0.6037, test_acc: 0.8043, best: 0.8346, time: 0:01:19
 Epoch: 174, lr: 1.0e-02, train_loss: 1.0288, train_acc: 0.7428 test_loss: 0.5528, test_acc: 0.8223, best: 0.8346, time: 0:01:17
 Epoch: 175, lr: 1.0e-02, train_loss: 0.9576, train_acc: 0.7682 test_loss: 0.6408, test_acc: 0.8039, best: 0.8346, time: 0:00:25
 Epoch: 176, lr: 1.0e-02, train_loss: 1.0027, train_acc: 0.7430 test_loss: 0.5558, test_acc: 0.8274, best: 0.8346, time: 0:00:21
 Epoch: 177, lr: 1.0e-02, train_loss: 1.0002, train_acc: 0.7458 test_loss: 0.6015, test_acc: 0.8089, best: 0.8346, time: 0:00:21
 Epoch: 178, lr: 1.0e-02, train_loss: 0.9814, train_acc: 0.7532 test_loss: 0.5822, test_acc: 0.8253, best: 0.8346, time: 0:00:21
 Epoch: 179, lr: 1.0e-02, train_loss: 1.0204, train_acc: 0.7430 test_loss: 0.6198, test_acc: 0.8093, best: 0.8346, time: 0:00:21
 Epoch: 180, lr: 2.0e-03, train_loss: 0.9107, train_acc: 0.7766 test_loss: 0.5137, test_acc: 0.8396, best: 0.8396, time: 0:00:21
 Epoch: 181, lr: 2.0e-03, train_loss: 0.8732, train_acc: 0.8042 test_loss: 0.5073, test_acc: 0.8464, best: 0.8464, time: 0:00:21
 Epoch: 182, lr: 2.0e-03, train_loss: 0.8722, train_acc: 0.7972 test_loss: 0.5312, test_acc: 0.8389, best: 0.8464, time: 0:00:21
 Epoch: 183, lr: 2.0e-03, train_loss: 0.9181, train_acc: 0.7906 test_loss: 0.5112, test_acc: 0.8442, best: 0.8464, time: 0:00:21
 Epoch: 184, lr: 2.0e-03, train_loss: 0.8657, train_acc: 0.7986 test_loss: 0.4893, test_acc: 0.8426, best: 0.8464, time: 0:00:21
 Epoch: 185, lr: 2.0e-03, train_loss: 0.8687, train_acc: 0.8054 test_loss: 0.5450, test_acc: 0.8419, best: 0.8464, time: 0:00:21
 Epoch: 186, lr: 2.0e-03, train_loss: 0.8764, train_acc: 0.7956 test_loss: 0.4978, test_acc: 0.8459, best: 0.8464, time: 0:00:21
 Epoch: 187, lr: 2.0e-03, train_loss: 0.9254, train_acc: 0.7772 test_loss: 0.5328, test_acc: 0.8424, best: 0.8464, time: 0:00:20
 Epoch: 188, lr: 2.0e-03, train_loss: 0.8936, train_acc: 0.7852 test_loss: 0.4805, test_acc: 0.8475, best: 0.8475, time: 0:00:21
 Epoch: 189, lr: 2.0e-03, train_loss: 0.9014, train_acc: 0.7862 test_loss: 0.5065, test_acc: 0.8484, best: 0.8484, time: 0:00:21
 Epoch: 190, lr: 2.0e-03, train_loss: 0.9135, train_acc: 0.7906 test_loss: 0.5050, test_acc: 0.8464, best: 0.8484, time: 0:00:21
 Epoch: 191, lr: 2.0e-03, train_loss: 0.8708, train_acc: 0.7986 test_loss: 0.5055, test_acc: 0.8459, best: 0.8484, time: 0:00:20
 Epoch: 192, lr: 2.0e-03, train_loss: 0.8641, train_acc: 0.8062 test_loss: 0.5141, test_acc: 0.8471, best: 0.8484, time: 0:00:21
 Epoch: 193, lr: 2.0e-03, train_loss: 0.8414, train_acc: 0.8062 test_loss: 0.4905, test_acc: 0.8481, best: 0.8484, time: 0:00:21
 Epoch: 194, lr: 2.0e-03, train_loss: 0.8194, train_acc: 0.8188 test_loss: 0.4963, test_acc: 0.8448, best: 0.8484, time: 0:00:21
 Epoch: 195, lr: 2.0e-03, train_loss: 0.8971, train_acc: 0.7868 test_loss: 0.5163, test_acc: 0.8407, best: 0.8484, time: 0:00:21
 Epoch: 196, lr: 2.0e-03, train_loss: 0.8758, train_acc: 0.7966 test_loss: 0.5334, test_acc: 0.8335, best: 0.8484, time: 0:00:21
 Epoch: 197, lr: 2.0e-03, train_loss: 0.8648, train_acc: 0.8022 test_loss: 0.4989, test_acc: 0.8451, best: 0.8484, time: 0:00:21
 Epoch: 198, lr: 2.0e-03, train_loss: 0.8161, train_acc: 0.8188 test_loss: 0.4933, test_acc: 0.8423, best: 0.8484, time: 0:00:21
 Epoch: 199, lr: 2.0e-03, train_loss: 0.8579, train_acc: 0.8120 test_loss: 0.5083, test_acc: 0.8424, best: 0.8484, time: 0:00:21
 Epoch: 200, lr: 2.0e-03, train_loss: 0.8829, train_acc: 0.7966 test_loss: 0.4960, test_acc: 0.8472, best: 0.8484, time: 0:00:21
 Epoch: 201, lr: 2.0e-03, train_loss: 0.8971, train_acc: 0.7924 test_loss: 0.5382, test_acc: 0.8391, best: 0.8484, time: 0:00:21
 Epoch: 202, lr: 2.0e-03, train_loss: 0.8637, train_acc: 0.8064 test_loss: 0.5279, test_acc: 0.8470, best: 0.8484, time: 0:00:21
 Epoch: 203, lr: 2.0e-03, train_loss: 0.8778, train_acc: 0.7998 test_loss: 0.5156, test_acc: 0.8420, best: 0.8484, time: 0:00:21
 Epoch: 204, lr: 2.0e-03, train_loss: 0.8864, train_acc: 0.7980 test_loss: 0.5150, test_acc: 0.8426, best: 0.8484, time: 0:00:21
 Epoch: 205, lr: 2.0e-03, train_loss: 0.8376, train_acc: 0.8158 test_loss: 0.5338, test_acc: 0.8434, best: 0.8484, time: 0:00:22
 Epoch: 206, lr: 2.0e-03, train_loss: 0.8653, train_acc: 0.8010 test_loss: 0.4942, test_acc: 0.8480, best: 0.8484, time: 0:00:22
 Epoch: 207, lr: 2.0e-03, train_loss: 0.8652, train_acc: 0.8018 test_loss: 0.5324, test_acc: 0.8421, best: 0.8484, time: 0:00:21
 Epoch: 208, lr: 2.0e-03, train_loss: 0.8803, train_acc: 0.8020 test_loss: 0.5040, test_acc: 0.8466, best: 0.8484, time: 0:00:21
 Epoch: 209, lr: 2.0e-03, train_loss: 0.8796, train_acc: 0.8022 test_loss: 0.4962, test_acc: 0.8476, best: 0.8484, time: 0:00:21
 Epoch: 210, lr: 2.0e-03, train_loss: 0.8985, train_acc: 0.8038 test_loss: 0.5340, test_acc: 0.8492, best: 0.8492, time: 0:00:21
 Epoch: 211, lr: 2.0e-03, train_loss: 0.8520, train_acc: 0.8126 test_loss: 0.5157, test_acc: 0.8438, best: 0.8492, time: 0:00:21
 Epoch: 212, lr: 2.0e-03, train_loss: 0.8472, train_acc: 0.8114 test_loss: 0.5437, test_acc: 0.8476, best: 0.8492, time: 0:00:21
 Epoch: 213, lr: 2.0e-03, train_loss: 0.8854, train_acc: 0.8014 test_loss: 0.4954, test_acc: 0.8496, best: 0.8496, time: 0:00:21
 Epoch: 214, lr: 2.0e-03, train_loss: 0.8763, train_acc: 0.7974 test_loss: 0.5096, test_acc: 0.8471, best: 0.8496, time: 0:00:21
 Epoch: 215, lr: 2.0e-03, train_loss: 0.8508, train_acc: 0.8184 test_loss: 0.4944, test_acc: 0.8461, best: 0.8496, time: 0:00:21
 Epoch: 216, lr: 2.0e-03, train_loss: 0.8318, train_acc: 0.8172 test_loss: 0.4938, test_acc: 0.8478, best: 0.8496, time: 0:00:21
 Epoch: 217, lr: 2.0e-03, train_loss: 0.8431, train_acc: 0.8132 test_loss: 0.5247, test_acc: 0.8444, best: 0.8496, time: 0:00:21
 Epoch: 218, lr: 2.0e-03, train_loss: 0.8335, train_acc: 0.8052 test_loss: 0.4844, test_acc: 0.8499, best: 0.8499, time: 0:00:21
 Epoch: 219, lr: 2.0e-03, train_loss: 0.8399, train_acc: 0.8096 test_loss: 0.5091, test_acc: 0.8462, best: 0.8499, time: 0:00:22
 Epoch: 220, lr: 2.0e-03, train_loss: 0.8758, train_acc: 0.8062 test_loss: 0.5296, test_acc: 0.8448, best: 0.8499, time: 0:00:21
 Epoch: 221, lr: 2.0e-03, train_loss: 0.8268, train_acc: 0.8176 test_loss: 0.4917, test_acc: 0.8480, best: 0.8499, time: 0:00:21
 Epoch: 222, lr: 2.0e-03, train_loss: 0.8372, train_acc: 0.8102 test_loss: 0.5311, test_acc: 0.8427, best: 0.8499, time: 0:00:21
 Epoch: 223, lr: 2.0e-03, train_loss: 0.8586, train_acc: 0.8150 test_loss: 0.4911, test_acc: 0.8489, best: 0.8499, time: 0:00:21
 Epoch: 224, lr: 2.0e-03, train_loss: 0.8348, train_acc: 0.8148 test_loss: 0.5306, test_acc: 0.8433, best: 0.8499, time: 0:00:21
 Epoch: 225, lr: 2.0e-03, train_loss: 0.8326, train_acc: 0.8150 test_loss: 0.5135, test_acc: 0.8433, best: 0.8499, time: 0:00:21
 Epoch: 226, lr: 2.0e-03, train_loss: 0.8592, train_acc: 0.8082 test_loss: 0.5458, test_acc: 0.8456, best: 0.8499, time: 0:00:21
 Epoch: 227, lr: 2.0e-03, train_loss: 0.8519, train_acc: 0.8030 test_loss: 0.5285, test_acc: 0.8415, best: 0.8499, time: 0:00:21
 Epoch: 228, lr: 2.0e-03, train_loss: 0.8216, train_acc: 0.8092 test_loss: 0.5202, test_acc: 0.8409, best: 0.8499, time: 0:00:21
 Epoch: 229, lr: 2.0e-03, train_loss: 0.8420, train_acc: 0.8128 test_loss: 0.5298, test_acc: 0.8466, best: 0.8499, time: 0:00:21
 Epoch: 230, lr: 2.0e-03, train_loss: 0.8457, train_acc: 0.8042 test_loss: 0.4931, test_acc: 0.8448, best: 0.8499, time: 0:00:21
 Epoch: 231, lr: 2.0e-03, train_loss: 0.8371, train_acc: 0.8166 test_loss: 0.5512, test_acc: 0.8429, best: 0.8499, time: 0:00:21
 Epoch: 232, lr: 2.0e-03, train_loss: 0.8525, train_acc: 0.8030 test_loss: 0.5061, test_acc: 0.8472, best: 0.8499, time: 0:00:21
 Epoch: 233, lr: 2.0e-03, train_loss: 0.8476, train_acc: 0.8122 test_loss: 0.5284, test_acc: 0.8409, best: 0.8499, time: 0:00:21
 Epoch: 234, lr: 2.0e-03, train_loss: 0.8191, train_acc: 0.8250 test_loss: 0.4936, test_acc: 0.8480, best: 0.8499, time: 0:00:21
 Epoch: 235, lr: 2.0e-03, train_loss: 0.8154, train_acc: 0.8286 test_loss: 0.5247, test_acc: 0.8431, best: 0.8499, time: 0:00:22
 Epoch: 236, lr: 2.0e-03, train_loss: 0.8219, train_acc: 0.8128 test_loss: 0.5158, test_acc: 0.8448, best: 0.8499, time: 0:00:22
 Epoch: 237, lr: 2.0e-03, train_loss: 0.8261, train_acc: 0.8042 test_loss: 0.5510, test_acc: 0.8435, best: 0.8499, time: 0:00:21
 Epoch: 238, lr: 2.0e-03, train_loss: 0.8479, train_acc: 0.8120 test_loss: 0.5433, test_acc: 0.8451, best: 0.8499, time: 0:00:21
 Epoch: 239, lr: 2.0e-03, train_loss: 0.8322, train_acc: 0.8146 test_loss: 0.5009, test_acc: 0.8430, best: 0.8499, time: 0:00:21
 Epoch: 240, lr: 4.0e-04, train_loss: 0.8611, train_acc: 0.8102 test_loss: 0.5002, test_acc: 0.8486, best: 0.8499, time: 0:00:21
 Epoch: 241, lr: 4.0e-04, train_loss: 0.8350, train_acc: 0.8170 test_loss: 0.5363, test_acc: 0.8472, best: 0.8499, time: 0:00:22
 Epoch: 242, lr: 4.0e-04, train_loss: 0.8130, train_acc: 0.8218 test_loss: 0.4746, test_acc: 0.8501, best: 0.8501, time: 0:00:21
 Epoch: 243, lr: 4.0e-04, train_loss: 0.8325, train_acc: 0.8192 test_loss: 0.5056, test_acc: 0.8502, best: 0.8502, time: 0:00:21
 Epoch: 244, lr: 4.0e-04, train_loss: 0.8243, train_acc: 0.8316 test_loss: 0.4800, test_acc: 0.8511, best: 0.8511, time: 0:00:21
 Epoch: 245, lr: 4.0e-04, train_loss: 0.8231, train_acc: 0.8238 test_loss: 0.5406, test_acc: 0.8468, best: 0.8511, time: 0:00:21
 Epoch: 246, lr: 4.0e-04, train_loss: 0.8139, train_acc: 0.8248 test_loss: 0.4879, test_acc: 0.8490, best: 0.8511, time: 0:00:21
 Epoch: 247, lr: 4.0e-04, train_loss: 0.8154, train_acc: 0.8252 test_loss: 0.4640, test_acc: 0.8509, best: 0.8511, time: 0:00:21
 Epoch: 248, lr: 4.0e-04, train_loss: 0.8085, train_acc: 0.8274 test_loss: 0.4850, test_acc: 0.8490, best: 0.8511, time: 0:00:21
 Epoch: 249, lr: 4.0e-04, train_loss: 0.8413, train_acc: 0.8152 test_loss: 0.4723, test_acc: 0.8499, best: 0.8511, time: 0:00:21
 Epoch: 250, lr: 4.0e-04, train_loss: 0.8520, train_acc: 0.8178 test_loss: 0.5256, test_acc: 0.8498, best: 0.8511, time: 0:00:21
 Epoch: 251, lr: 4.0e-04, train_loss: 0.8324, train_acc: 0.8174 test_loss: 0.4871, test_acc: 0.8501, best: 0.8511, time: 0:00:21
 Epoch: 252, lr: 4.0e-04, train_loss: 0.8380, train_acc: 0.8146 test_loss: 0.5110, test_acc: 0.8471, best: 0.8511, time: 0:00:21
 Epoch: 253, lr: 4.0e-04, train_loss: 0.8394, train_acc: 0.8136 test_loss: 0.5325, test_acc: 0.8466, best: 0.8511, time: 0:00:21
 Epoch: 254, lr: 4.0e-04, train_loss: 0.8525, train_acc: 0.8152 test_loss: 0.4806, test_acc: 0.8495, best: 0.8511, time: 0:00:21
 Epoch: 255, lr: 4.0e-04, train_loss: 0.7776, train_acc: 0.8274 test_loss: 0.5024, test_acc: 0.8482, best: 0.8511, time: 0:00:20
 Epoch: 256, lr: 4.0e-04, train_loss: 0.8360, train_acc: 0.8140 test_loss: 0.5047, test_acc: 0.8510, best: 0.8511, time: 0:00:21
 Epoch: 257, lr: 4.0e-04, train_loss: 0.7853, train_acc: 0.8282 test_loss: 0.4999, test_acc: 0.8500, best: 0.8511, time: 0:00:20
 Epoch: 258, lr: 4.0e-04, train_loss: 0.8393, train_acc: 0.8140 test_loss: 0.4925, test_acc: 0.8530, best: 0.8530, time: 0:00:20
 Epoch: 259, lr: 4.0e-04, train_loss: 0.8339, train_acc: 0.8314 test_loss: 0.5141, test_acc: 0.8484, best: 0.8530, time: 0:00:20
 Epoch: 260, lr: 4.0e-04, train_loss: 0.8231, train_acc: 0.8194 test_loss: 0.5284, test_acc: 0.8475, best: 0.8530, time: 0:00:21
 Epoch: 261, lr: 4.0e-04, train_loss: 0.7903, train_acc: 0.8262 test_loss: 0.4999, test_acc: 0.8470, best: 0.8530, time: 0:00:21
 Epoch: 262, lr: 4.0e-04, train_loss: 0.8459, train_acc: 0.8238 test_loss: 0.5275, test_acc: 0.8449, best: 0.8530, time: 0:00:21
 Epoch: 263, lr: 4.0e-04, train_loss: 0.7939, train_acc: 0.8300 test_loss: 0.4709, test_acc: 0.8526, best: 0.8530, time: 0:00:21
 Epoch: 264, lr: 4.0e-04, train_loss: 0.8147, train_acc: 0.8278 test_loss: 0.5553, test_acc: 0.8465, best: 0.8530, time: 0:00:21
 Epoch: 265, lr: 4.0e-04, train_loss: 0.8266, train_acc: 0.8126 test_loss: 0.5015, test_acc: 0.8519, best: 0.8530, time: 0:00:22
 Epoch: 266, lr: 4.0e-04, train_loss: 0.7919, train_acc: 0.8246 test_loss: 0.4734, test_acc: 0.8510, best: 0.8530, time: 0:00:22
 Epoch: 267, lr: 4.0e-04, train_loss: 0.8243, train_acc: 0.8198 test_loss: 0.5210, test_acc: 0.8482, best: 0.8530, time: 0:00:21
 Epoch: 268, lr: 4.0e-04, train_loss: 0.8180, train_acc: 0.8206 test_loss: 0.5200, test_acc: 0.8495, best: 0.8530, time: 0:00:21
 Epoch: 269, lr: 4.0e-04, train_loss: 0.8143, train_acc: 0.8312 test_loss: 0.4922, test_acc: 0.8505, best: 0.8530, time: 0:00:22
 Epoch: 270, lr: 8.0e-05, train_loss: 0.8591, train_acc: 0.8150 test_loss: 0.5376, test_acc: 0.8478, best: 0.8530, time: 0:00:21
 Epoch: 271, lr: 8.0e-05, train_loss: 0.7921, train_acc: 0.8240 test_loss: 0.4884, test_acc: 0.8474, best: 0.8530, time: 0:00:21
 Epoch: 272, lr: 8.0e-05, train_loss: 0.7697, train_acc: 0.8358 test_loss: 0.5093, test_acc: 0.8472, best: 0.8530, time: 0:00:21
 Epoch: 273, lr: 8.0e-05, train_loss: 0.8044, train_acc: 0.8250 test_loss: 0.4818, test_acc: 0.8499, best: 0.8530, time: 0:00:21
 Epoch: 274, lr: 8.0e-05, train_loss: 0.8154, train_acc: 0.8288 test_loss: 0.5143, test_acc: 0.8494, best: 0.8530, time: 0:00:21
 Epoch: 275, lr: 8.0e-05, train_loss: 0.8184, train_acc: 0.8268 test_loss: 0.5009, test_acc: 0.8520, best: 0.8530, time: 0:00:21
 Epoch: 276, lr: 8.0e-05, train_loss: 0.8043, train_acc: 0.8246 test_loss: 0.4925, test_acc: 0.8524, best: 0.8530, time: 0:00:21
 Epoch: 277, lr: 8.0e-05, train_loss: 0.7902, train_acc: 0.8266 test_loss: 0.4700, test_acc: 0.8516, best: 0.8530, time: 0:00:20
 Epoch: 278, lr: 8.0e-05, train_loss: 0.8346, train_acc: 0.8256 test_loss: 0.5055, test_acc: 0.8514, best: 0.8530, time: 0:00:20
 Epoch: 279, lr: 8.0e-05, train_loss: 0.7811, train_acc: 0.8354 test_loss: 0.4831, test_acc: 0.8500, best: 0.8530, time: 0:00:21
 Epoch: 280, lr: 8.0e-05, train_loss: 0.8228, train_acc: 0.8196 test_loss: 0.5140, test_acc: 0.8466, best: 0.8530, time: 0:00:20
 Epoch: 281, lr: 8.0e-05, train_loss: 0.7819, train_acc: 0.8314 test_loss: 0.5203, test_acc: 0.8525, best: 0.8530, time: 0:00:22
 Epoch: 282, lr: 8.0e-05, train_loss: 0.8133, train_acc: 0.8222 test_loss: 0.4883, test_acc: 0.8506, best: 0.8530, time: 0:00:21
 Epoch: 283, lr: 8.0e-05, train_loss: 0.7716, train_acc: 0.8256 test_loss: 0.4905, test_acc: 0.8520, best: 0.8530, time: 0:00:21
 Epoch: 284, lr: 8.0e-05, train_loss: 0.7863, train_acc: 0.8430 test_loss: 0.4893, test_acc: 0.8511, best: 0.8530, time: 0:00:22
 Epoch: 285, lr: 8.0e-05, train_loss: 0.7958, train_acc: 0.8276 test_loss: 0.4885, test_acc: 0.8501, best: 0.8530, time: 0:00:21
 Epoch: 286, lr: 8.0e-05, train_loss: 0.8098, train_acc: 0.8226 test_loss: 0.4947, test_acc: 0.8499, best: 0.8530, time: 0:00:21
 Epoch: 287, lr: 8.0e-05, train_loss: 0.7697, train_acc: 0.8318 test_loss: 0.4898, test_acc: 0.8501, best: 0.8530, time: 0:00:21
 Epoch: 288, lr: 8.0e-05, train_loss: 0.7684, train_acc: 0.8356 test_loss: 0.4780, test_acc: 0.8514, best: 0.8530, time: 0:00:21
 Epoch: 289, lr: 8.0e-05, train_loss: 0.8211, train_acc: 0.8256 test_loss: 0.5424, test_acc: 0.8482, best: 0.8530, time: 0:00:21
 Epoch: 290, lr: 8.0e-05, train_loss: 0.8427, train_acc: 0.8084 test_loss: 0.5354, test_acc: 0.8469, best: 0.8530, time: 0:00:22
 Epoch: 291, lr: 8.0e-05, train_loss: 0.7980, train_acc: 0.8208 test_loss: 0.4855, test_acc: 0.8520, best: 0.8530, time: 0:00:21
 Epoch: 292, lr: 8.0e-05, train_loss: 0.8000, train_acc: 0.8282 test_loss: 0.4870, test_acc: 0.8485, best: 0.8530, time: 0:00:21
 Epoch: 293, lr: 8.0e-05, train_loss: 0.7839, train_acc: 0.8320 test_loss: 0.5073, test_acc: 0.8488, best: 0.8530, time: 0:00:21
 Epoch: 294, lr: 8.0e-05, train_loss: 0.8411, train_acc: 0.8108 test_loss: 0.5111, test_acc: 0.8499, best: 0.8530, time: 0:00:21
 Epoch: 295, lr: 8.0e-05, train_loss: 0.7888, train_acc: 0.8334 test_loss: 0.4922, test_acc: 0.8499, best: 0.8530, time: 0:00:21
 Epoch: 296, lr: 8.0e-05, train_loss: 0.7761, train_acc: 0.8230 test_loss: 0.5206, test_acc: 0.8489, best: 0.8530, time: 0:00:21
 Epoch: 297, lr: 8.0e-05, train_loss: 0.8044, train_acc: 0.8276 test_loss: 0.4951, test_acc: 0.8496, best: 0.8530, time: 0:00:21
 Epoch: 298, lr: 8.0e-05, train_loss: 0.8201, train_acc: 0.8220 test_loss: 0.5081, test_acc: 0.8499, best: 0.8530, time: 0:00:21
 Epoch: 299, lr: 8.0e-05, train_loss: 0.8114, train_acc: 0.8286 test_loss: 0.5064, test_acc: 0.8469, best: 0.8530, time: 0:00:21
 Epoch: 300, lr: 8.0e-05, train_loss: 0.8000, train_acc: 0.8346 test_loss: 0.4810, test_acc: 0.8534, best: 0.8534, time: 0:00:21
 Highest accuracy: 0.8534